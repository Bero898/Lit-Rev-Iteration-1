text,Document Title,Abstract,source,bool,processed_text
"A Black-box Monitoring Approach to Measure Microservices Runtime Performance Microservices changed cloud computing by moving the applications’ complexity from one monolithic executable to thousands of network interactions between small components. Given the increasing deployment sizes, the architectural exploitation challenges, and the impact on data-centers’ power consumption, we need to efficiently track this complexity. Within this article, we propose a black-box monitoring approach to track microservices at scale, focusing on architectural metrics, power consumption, application performance, and network performance. The proposed approach is transparent w.r.t. the monitored applications, generates less overhead w.r.t. black-box approaches available in the state-of-the-art, and provides fine-grain accurate metrics.",A Black-box Monitoring Approach to Measure Microservices Runtime Performance,"Microservices changed cloud computing by moving the applications’ complexity from one monolithic executable to thousands of network interactions between small components. Given the increasing deployment sizes, the architectural exploitation challenges, and the impact on data-centers’ power consumption, we need to efficiently track this complexity. Within this article, we propose a black-box monitoring approach to track microservices at scale, focusing on architectural metrics, power consumption, application performance, and network performance. The proposed approach is transparent w.r.t. the monitored applications, generates less overhead w.r.t. black-box approaches available in the state-of-the-art, and provides fine-grain accurate metrics.",ACM,no,"['monitoring', 'measure', 'runtime', 'performance', 'changed', 'computing', 'moving', 'complexity', 'one', 'monolithic', 'executable', 'thousand', 'network', 'interaction', 'small', 'given', 'increasing', 'deployment', 'size', 'architectural', 'challenge', 'impact', 'power', 'consumption', 'need', 'efficiently', 'track', 'complexity', 'within', 'article', 'propose', 'monitoring', 'track', 'scale', 'focusing', 'architectural', 'metric', 'power', 'consumption', 'performance', 'network', 'performance', 'proposed', 'monitored', 'generates', 'less', 'overhead', 'available', 'provides', 'accurate', 'metric']"
"IMAGE: An Open-Source, Extensible Framework for Deploying Accessible Audio and Haptic Renderings of Web Graphics For accessibility practitioners, creating and deploying novel multimedia interactions for people with disabilities is a nontrivial task. As a result, many projects aiming to support such accessibility needs come and go or never make it to a public release. To reduce the overhead involved in deploying and maintaining a system that transforms web content into multimodal renderings, we created an open source, modular microservices architecture as part of the IMAGE project. This project aims to design richer means of interacting with web graphics than is afforded by a screen reader and text descriptions alone. To benefit the community of accessibility software developers, we discuss this architecture and explain how it provides support for several multimodal processing pipelines. Beyond illustrating the initial use case that motivated this effort, we further describe two use cases outside the scope of our project to explain how a team could use the architecture to develop and deploy accessible solutions for their own work. We then discuss our team’s experience working with the IMAGE architecture, informed by discussions with six project members, and provide recommendations to other practitioners considering applying the framework to their own accessibility projects.","IMAGE: An Open-Source, Extensible Framework for Deploying Accessible Audio and Haptic Renderings of Web Graphics","For accessibility practitioners, creating and deploying novel multimedia interactions for people with disabilities is a nontrivial task. As a result, many projects aiming to support such accessibility needs come and go or never make it to a public release. To reduce the overhead involved in deploying and maintaining a system that transforms web content into multimodal renderings, we created an open source, modular microservices architecture as part of the IMAGE project. This project aims to design richer means of interacting with web graphics than is afforded by a screen reader and text descriptions alone. To benefit the community of accessibility software developers, we discuss this architecture and explain how it provides support for several multimodal processing pipelines. Beyond illustrating the initial use case that motivated this effort, we further describe two use cases outside the scope of our project to explain how a team could use the architecture to develop and deploy accessible solutions for their own work. We then discuss our team’s experience working with the IMAGE architecture, informed by discussions with six project members, and provide recommendations to other practitioners considering applying the framework to their own accessibility projects.",ACM,no,"['image', 'extensible', 'framework', 'deploying', 'accessible', 'rendering', 'web', 'graphic', 'accessibility', 'practitioner', 'creating', 'deploying', 'novel', 'interaction', 'people', 'task', 'result', 'many', 'project', 'aiming', 'support', 'accessibility', 'need', 'come', 'go', 'make', 'public', 'release', 'reduce', 'overhead', 'involved', 'deploying', 'maintaining', 'web', 'content', 'multimodal', 'rendering', 'created', 'open', 'source', 'modular', 'part', 'image', 'project', 'project', 'aim', 'design', 'mean', 'interacting', 'web', 'graphic', 'text', 'description', 'benefit', 'community', 'accessibility', 'developer', 'discus', 'explain', 'provides', 'support', 'several', 'multimodal', 'processing', 'pipeline', 'beyond', 'initial', 'use', 'case', 'motivated', 'effort', 'describe', 'two', 'use', 'case', 'outside', 'scope', 'project', 'explain', 'team', 'could', 'use', 'develop', 'deploy', 'accessible', 'solution', 'work', 'discus', 'team', 'experience', 'working', 'image', 'discussion', 'six', 'project', 'provide', 'recommendation', 'practitioner', 'considering', 'applying', 'framework', 'accessibility', 'project']"
"Data Mesh: A Systematic Gray Literature Review Data mesh is an emerging domain-driven decentralized data architecture that aims to minimize or avoid operational bottlenecks associated with centralized, monolithic data architectures in enterprises. The topic has piqued the practitioners’ interest, and considerable gray literature exists. At the same time, we observe a lack of academic attempts at defining and building upon the concept. Hence, in this article, we aim to start from the foundations and characterize the data mesh architecture regarding its design principles, architectural components, capabilities, and organizational roles. We systematically collected, analyzed, and synthesized 114 industrial gray literature articles. The resulting review provides insights into practitioners’ perspectives on the four key principles of data mesh: data as a product, domain ownership of data, self-serve data platform, and federated computational governance. Moreover, due to the comparability of data mesh and SOA (service-oriented architecture), we mapped the findings from the gray literature into the reference architectures from the SOA academic literature to create the reference architectures for describing three key dimensions of data mesh: organization of capabilities and roles, development, and runtime. Finally, we discuss open research issues in data mesh, partially based on the findings from the gray literature.",Data Mesh: A Systematic Gray Literature Review,"Data mesh is an emerging domain-driven decentralized data architecture that aims to minimize or avoid operational bottlenecks associated with centralized, monolithic data architectures in enterprises. The topic has piqued the practitioners’ interest, and considerable gray literature exists. At the same time, we observe a lack of academic attempts at defining and building upon the concept. Hence, in this article, we aim to start from the foundations and characterize the data mesh architecture regarding its design principles, architectural components, capabilities, and organizational roles. We systematically collected, analyzed, and synthesized 114 industrial gray literature articles. The resulting review provides insights into practitioners’ perspectives on the four key principles of data mesh: data as a product, domain ownership of data, self-serve data platform, and federated computational governance. Moreover, due to the comparability of data mesh and SOA (service-oriented architecture), we mapped the findings from the gray literature into the reference architectures from the SOA academic literature to create the reference architectures for describing three key dimensions of data mesh: organization of capabilities and roles, development, and runtime. Finally, we discuss open research issues in data mesh, partially based on the findings from the gray literature.",ACM,no,"['mesh', 'systematic', 'gray', 'literature', 'review', 'mesh', 'emerging', 'decentralized', 'aim', 'minimize', 'avoid', 'operational', 'bottleneck', 'associated', 'centralized', 'monolithic', 'enterprise', 'topic', 'practitioner', 'interest', 'gray', 'literature', 'exists', 'time', 'observe', 'lack', 'academic', 'attempt', 'defining', 'building', 'upon', 'concept', 'hence', 'article', 'aim', 'start', 'foundation', 'characterize', 'mesh', 'regarding', 'design', 'principle', 'architectural', 'capability', 'organizational', 'role', 'collected', 'analyzed', 'industrial', 'gray', 'literature', 'article', 'resulting', 'review', 'provides', 'insight', 'practitioner', 'perspective', 'four', 'key', 'principle', 'mesh', 'product', 'domain', 'ownership', 'platform', 'federated', 'computational', 'governance', 'moreover', 'due', 'mesh', 'soa', 'mapped', 'finding', 'gray', 'literature', 'reference', 'soa', 'academic', 'literature', 'create', 'reference', 'describing', 'three', 'key', 'dimension', 'mesh', 'organization', 'capability', 'role', 'development', 'runtime', 'finally', 'discus', 'open', 'research', 'issue', 'mesh', 'partially', 'based', 'finding', 'gray', 'literature']"
"The Tale of Errors in Microservices Microservice architecture is the computing paradigm of choice for large, service-oriented software catering to real-time requests. Individual programs in such a system perform Remote Procedure Calls (RPCs) to other microservices to accomplish sub-tasks. Microservices are designed to be robust; top-level requests can succeed despite errors returned from RPC sub-tasks, referred to as non-fatal errors. Because of this design, the top-level microservices tend to ''live with'' non-fatal errors. Hence, a natural question to ask is ''how prevalent are non-fatal errors and what impact do they have on the exposed latency of top-level requests?''In this paper, we present a large-scale study of errors in microservices. We answer the aforementioned question by analyzing 11 Billion RPCs covering 1,900 user-facing endpoints at the Uber serving requests of hundreds of millions of active users. To assess the latency impact of non-fatal errors, we develop a methodology that projects potential latency savings for a given request as if the time spent on failing APIs were eliminated. This estimator allows ranking and bubbling up those APIs that are worthy of further investigations, where the non-fatal errors likely resulted in operational inefficiencies. Finally, we employ our error detection and impact estimation techniques to pinpoint operational inefficiencies, which a) result in a tail latency reduction of a critical endpoint by 30\% and b) offer insights into common inefficiency-introducing patterns.",The Tale of Errors in Microservices,"Microservice architecture is the computing paradigm of choice for large, service-oriented software catering to real-time requests. Individual programs in such a system perform Remote Procedure Calls (RPCs) to other microservices to accomplish sub-tasks. Microservices are designed to be robust; top-level requests can succeed despite errors returned from RPC sub-tasks, referred to as non-fatal errors. Because of this design, the top-level microservices tend to ''live with'' non-fatal errors. Hence, a natural question to ask is ''how prevalent are non-fatal errors and what impact do they have on the exposed latency of top-level requests?''In this paper, we present a large-scale study of errors in microservices. We answer the aforementioned question by analyzing 11 Billion RPCs covering 1,900 user-facing endpoints at the Uber serving requests of hundreds of millions of active users. To assess the latency impact of non-fatal errors, we develop a methodology that projects potential latency savings for a given request as if the time spent on failing APIs were eliminated. This estimator allows ranking and bubbling up those APIs that are worthy of further investigations, where the non-fatal errors likely resulted in operational inefficiencies. Finally, we employ our error detection and impact estimation techniques to pinpoint operational inefficiencies, which a) result in a tail latency reduction of a critical endpoint by 30\% and b) offer insights into common inefficiency-introducing patterns.",ACM,no,"['error', 'computing', 'paradigm', 'choice', 'large', 'request', 'individual', 'program', 'perform', 'remote', 'procedure', 'call', 'accomplish', 'designed', 'robust', 'request', 'despite', 'error', 'rpc', 'referred', 'error', 'design', 'tend', 'live', 'error', 'hence', 'natural', 'question', 'prevalent', 'error', 'impact', 'exposed', 'latency', 'request', 'paper', 'present', 'study', 'error', 'answer', 'aforementioned', 'question', 'analyzing', 'covering', 'endpoint', 'serving', 'request', 'hundred', 'million', 'active', 'user', 'assess', 'latency', 'impact', 'error', 'develop', 'methodology', 'project', 'potential', 'latency', 'saving', 'given', 'request', 'time', 'apis', 'eliminated', 'allows', 'ranking', 'apis', 'investigation', 'error', 'likely', 'operational', 'finally', 'employ', 'error', 'detection', 'impact', 'estimation', 'technique', 'pinpoint', 'operational', 'result', 'tail', 'latency', 'reduction', 'critical', 'endpoint', 'b', 'offer', 'insight', 'common', 'pattern']"
"Query-driven video event processing for the internet of multimedia things Advances in Deep Neural Network (DNN) techniques have revolutionized video analytics and unlocked the potential for querying and mining video event patterns. This paper details GNOSIS, an event processing platform to perform near-real-time video event detection in a distributed setting. GNOSIS follows a serverless approach where its component acts as independent microservices and can be deployed at multiple nodes. GNOSIS uses a declarative query-driven approach where users can write customize queries for spatiotemporal video event reasoning. The system converts the incoming video streams into a continuous evolving graph stream using machine learning (ML) and DNN models pipeline and applies graph matching for video event pattern detection. GNOSIS can perform both stateful and stateless video event matching. To improve Quality of Service (QoS), recent work in GNOSIS incorporates optimization techniques like adaptive scheduling, energy efficiency, and content-driven windows. This paper demonstrates the Occupational Health and Safety query use cases to show the GNOSIS efficacy.",Query-driven video event processing for the internet of multimedia things,"Advances in Deep Neural Network (DNN) techniques have revolutionized video analytics and unlocked the potential for querying and mining video event patterns. This paper details GNOSIS, an event processing platform to perform near-real-time video event detection in a distributed setting. GNOSIS follows a serverless approach where its component acts as independent microservices and can be deployed at multiple nodes. GNOSIS uses a declarative query-driven approach where users can write customize queries for spatiotemporal video event reasoning. The system converts the incoming video streams into a continuous evolving graph stream using machine learning (ML) and DNN models pipeline and applies graph matching for video event pattern detection. GNOSIS can perform both stateful and stateless video event matching. To improve Quality of Service (QoS), recent work in GNOSIS incorporates optimization techniques like adaptive scheduling, energy efficiency, and content-driven windows. This paper demonstrates the Occupational Health and Safety query use cases to show the GNOSIS efficacy.",ACM,no,"['video', 'event', 'processing', 'internet', 'thing', 'advance', 'deep', 'neural', 'network', 'technique', 'revolutionized', 'video', 'analytics', 'potential', 'mining', 'video', 'event', 'pattern', 'paper', 'detail', 'gnosis', 'event', 'processing', 'platform', 'perform', 'video', 'event', 'detection', 'distributed', 'setting', 'gnosis', 'follows', 'serverless', 'act', 'independent', 'deployed', 'multiple', 'node', 'gnosis', 'us', 'declarative', 'user', 'write', 'customize', 'query', 'video', 'event', 'reasoning', 'convert', 'incoming', 'video', 'stream', 'continuous', 'evolving', 'graph', 'stream', 'using', 'machine', 'learning', 'ml', 'model', 'pipeline', 'applies', 'graph', 'matching', 'video', 'event', 'pattern', 'detection', 'gnosis', 'perform', 'stateful', 'stateless', 'video', 'event', 'matching', 'improve', 'quality', 'qos', 'recent', 'work', 'gnosis', 'optimization', 'technique', 'like', 'adaptive', 'scheduling', 'energy', 'efficiency', 'paper', 'demonstrates', 'health', 'safety', 'query', 'use', 'case', 'show', 'gnosis', 'efficacy']"
"Design and development of an open private educational cloud storage solution for application development CS, IT, and software engineering students need to learn and master web application development and cloud computing skills on an educational full-stack Cloud architecture. In this paper we provide the design of an educational full-stack architecture integrating a private storage cloud. The focus was on how to integrate, configure, secure and deploy web-software applications, microservices and private storage within a full-stack architecture. In this research study we determined the feasibility of designing and developing an open private-cloud storage solution for cloud software. We also share the results of the deployment and testing of phases 0 and 1 of the educational full-stack architecture.",Design and development of an open private educational cloud storage solution for application development,"CS, IT, and software engineering students need to learn and master web application development and cloud computing skills on an educational full-stack Cloud architecture. In this paper we provide the design of an educational full-stack architecture integrating a private storage cloud. The focus was on how to integrate, configure, secure and deploy web-software applications, microservices and private storage within a full-stack architecture. In this research study we determined the feasibility of designing and developing an open private-cloud storage solution for cloud software. We also share the results of the deployment and testing of phases 0 and 1 of the educational full-stack architecture.",ACM,no,"['design', 'development', 'open', 'private', 'educational', 'storage', 'solution', 'development', 'c', 'engineering', 'student', 'need', 'learn', 'master', 'web', 'development', 'computing', 'skill', 'educational', 'paper', 'provide', 'design', 'educational', 'integrating', 'private', 'storage', 'focus', 'integrate', 'configure', 'secure', 'deploy', 'private', 'storage', 'within', 'research', 'study', 'feasibility', 'designing', 'developing', 'open', 'storage', 'solution', 'also', 'share', 'result', 'deployment', 'testing', 'phase', 'educational']"
"The structure and delivery of an advanced systems administration IT course IT program courses should allow students to acquire the needed IT skills to enable them to be job ready by graduation. To prepare the IT graduates to current and future practices of virtualized computing resources, which integrate IT systems and services, DevOps and microservices, systems administration courses need to introduce students to current tools used to administer and manage continuous integration and deployment of infrastructure and services. In this paper, we provide the structure, components, hands-on assignments, and the virtual environment of a senior-level competency-based advanced Unix/Linux systems administration course that is delivered face-to-face and online. The course introduces current organizational practices of continuous integration and delivery of services. Student course evaluation and what helped them learn the most are also presented and discussed.",The structure and delivery of an advanced systems administration IT course,"IT program courses should allow students to acquire the needed IT skills to enable them to be job ready by graduation. To prepare the IT graduates to current and future practices of virtualized computing resources, which integrate IT systems and services, DevOps and microservices, systems administration courses need to introduce students to current tools used to administer and manage continuous integration and deployment of infrastructure and services. In this paper, we provide the structure, components, hands-on assignments, and the virtual environment of a senior-level competency-based advanced Unix/Linux systems administration course that is delivered face-to-face and online. The course introduces current organizational practices of continuous integration and delivery of services. Student course evaluation and what helped them learn the most are also presented and discussed.",ACM,no,"['structure', 'delivery', 'advanced', 'administration', 'course', 'program', 'course', 'allow', 'student', 'needed', 'skill', 'enable', 'job', 'ready', 'current', 'future', 'practice', 'virtualized', 'computing', 'resource', 'integrate', 'devops', 'administration', 'course', 'need', 'introduce', 'student', 'current', 'tool', 'used', 'manage', 'continuous', 'integration', 'deployment', 'infrastructure', 'paper', 'provide', 'structure', 'assignment', 'virtual', 'environment', 'advanced', 'administration', 'course', 'online', 'course', 'introduces', 'current', 'organizational', 'practice', 'continuous', 'integration', 'delivery', 'student', 'course', 'evaluation', 'helped', 'learn', 'also', 'presented', 'discussed']"
"Semi-automated Cross-Component Issue Management and Impact Analysis Despite microservices and other component-based architecture styles being state of the art in research for many years by now, issue management across the boundaries of a single component is still challenging. Components that were developed independently and can be used independently are joined together in the overall architecture, which results in dependencies between those components. Due to these dependencies, bugs can result that propagate along the call chains through the architecture. Other types of issues, such as the violation of non-functional quality properties, can also impact other components. However, traditional issue management systems end at the boundaries of a component, making tracking of issues across different components time-consuming and error-prone. Therefore, a need for automation arises for cross-component issue management, which automatically puts issues of the independent components in the correct mutual context, creating new cross-component issues and syncing cross-component issues between different components. This automation could enable developers to manage issues across components as efficiently as possible and increases the system’s quality. To solve this problem, we propose an initial approach for semi-automated cross-component issue management in conjunction with service-level objectives based on our Gropius system. For example, relationships between issues of the same or different components can be predicted using classification to identify dependencies of issues across component boundaries. In addition, we are developing a system to model, monitor and alert service-level objectives. Based on this, the impact of such quality violations on the overall system and the business process will be analysed and explained through cross-component issues.",Semi-automated Cross-Component Issue Management and Impact Analysis,"Despite microservices and other component-based architecture styles being state of the art in research for many years by now, issue management across the boundaries of a single component is still challenging. Components that were developed independently and can be used independently are joined together in the overall architecture, which results in dependencies between those components. Due to these dependencies, bugs can result that propagate along the call chains through the architecture. Other types of issues, such as the violation of non-functional quality properties, can also impact other components. However, traditional issue management systems end at the boundaries of a component, making tracking of issues across different components time-consuming and error-prone. Therefore, a need for automation arises for cross-component issue management, which automatically puts issues of the independent components in the correct mutual context, creating new cross-component issues and syncing cross-component issues between different components. This automation could enable developers to manage issues across components as efficiently as possible and increases the system’s quality. To solve this problem, we propose an initial approach for semi-automated cross-component issue management in conjunction with service-level objectives based on our Gropius system. For example, relationships between issues of the same or different components can be predicted using classification to identify dependencies of issues across component boundaries. In addition, we are developing a system to model, monitor and alert service-level objectives. Based on this, the impact of such quality violations on the overall system and the business process will be analysed and explained through cross-component issues.",IEEE conference,no,"['issue', 'management', 'impact', 'analysis', 'despite', 'style', 'state', 'art', 'research', 'many', 'year', 'issue', 'management', 'across', 'boundary', 'single', 'still', 'challenging', 'developed', 'independently', 'used', 'independently', 'together', 'overall', 'result', 'dependency', 'due', 'dependency', 'bug', 'result', 'propagate', 'along', 'call', 'chain', 'type', 'issue', 'violation', 'quality', 'property', 'also', 'impact', 'however', 'traditional', 'issue', 'management', 'end', 'boundary', 'making', 'tracking', 'issue', 'across', 'different', 'therefore', 'need', 'automation', 'arises', 'issue', 'management', 'automatically', 'put', 'issue', 'independent', 'correct', 'mutual', 'context', 'creating', 'new', 'issue', 'issue', 'different', 'automation', 'could', 'enable', 'developer', 'manage', 'issue', 'across', 'efficiently', 'possible', 'increase', 'quality', 'solve', 'problem', 'propose', 'initial', 'issue', 'management', 'objective', 'based', 'example', 'relationship', 'issue', 'different', 'predicted', 'using', 'classification', 'identify', 'dependency', 'issue', 'across', 'boundary', 'addition', 'developing', 'model', 'monitor', 'objective', 'based', 'impact', 'quality', 'violation', 'overall', 'business', 'process', 'analysed', 'explained', 'issue']"
"Design and implementation of online judgment system based on microservice architecture and Docker The online judgment system tests whether the source code can pass the problem’s test cases in the programming contests. Users only need to click the submit button on the front-end page, and the system will return the judge results after a certain period. Although there are many online judgment systems for programming contests, there are few online judgment systems for programming teaching and adopting a microservice architecture. This paper aims to design and implement an online judgment system for programming teaching. The system’s front-end adopts Vue and Element-Ui framework, and the back-end adopts microservice architecture for development. On the one hand, using the system can improve students' programming ability and teachers' efficiency and accuracy in marking programming assignments. On the other hand, the system has an online contest function, which can hold contests or be used as an examination platform to assess students' actual levels.",Design and implementation of online judgment system based on microservice architecture and Docker,"The online judgment system tests whether the source code can pass the problem’s test cases in the programming contests. Users only need to click the submit button on the front-end page, and the system will return the judge results after a certain period. Although there are many online judgment systems for programming contests, there are few online judgment systems for programming teaching and adopting a microservice architecture. This paper aims to design and implement an online judgment system for programming teaching. The system’s front-end adopts Vue and Element-Ui framework, and the back-end adopts microservice architecture for development. On the one hand, using the system can improve students' programming ability and teachers' efficiency and accuracy in marking programming assignments. On the other hand, the system has an online contest function, which can hold contests or be used as an examination platform to assess students' actual levels.",IEEE conference,no,"['design', 'implementation', 'online', 'judgment', 'based', 'docker', 'online', 'judgment', 'test', 'whether', 'source', 'code', 'problem', 'test', 'case', 'programming', 'contest', 'user', 'need', 'result', 'certain', 'period', 'although', 'many', 'online', 'judgment', 'programming', 'contest', 'online', 'judgment', 'programming', 'teaching', 'adopting', 'paper', 'aim', 'design', 'implement', 'online', 'judgment', 'programming', 'teaching', 'adopts', 'framework', 'adopts', 'development', 'one', 'hand', 'using', 'improve', 'student', 'programming', 'ability', 'efficiency', 'accuracy', 'programming', 'assignment', 'hand', 'online', 'contest', 'function', 'contest', 'used', 'platform', 'assess', 'student', 'actual', 'level']"
"A BlackBox Approach to Profile Runtime Execution Dependencies in Microservices Loosely-coupled and lightweight microservices running in containers are likely to form complex execution dependencies inside the system. The execution dependency arises when two execution paths partially share component microservices, resulting in potential runtime performance interference. In this paper, we present a blackbox approach that utilizes legitimate HTTP requests to accurately profile the internal pairwise dependencies of all supported execution paths in the target microservices application. Concretely, we profile the pairwise dependency of two execution paths through performance interference analysis by sending bursts of two types of requests simultaneously. By characterizing and grouping all the execution paths based on their pairwise dependencies, the black box approach can derive a clear dependency graph(s) of the entire backend of the microservices application. We validate the effectiveness of the blackbox approach through experiments of open-source microservices benchmark applications running on real clouds (e.g., EC2, Azure).",A BlackBox Approach to Profile Runtime Execution Dependencies in Microservices,"Loosely-coupled and lightweight microservices running in containers are likely to form complex execution dependencies inside the system. The execution dependency arises when two execution paths partially share component microservices, resulting in potential runtime performance interference. In this paper, we present a blackbox approach that utilizes legitimate HTTP requests to accurately profile the internal pairwise dependencies of all supported execution paths in the target microservices application. Concretely, we profile the pairwise dependency of two execution paths through performance interference analysis by sending bursts of two types of requests simultaneously. By characterizing and grouping all the execution paths based on their pairwise dependencies, the black box approach can derive a clear dependency graph(s) of the entire backend of the microservices application. We validate the effectiveness of the blackbox approach through experiments of open-source microservices benchmark applications running on real clouds (e.g., EC2, Azure).",IEEE conference,no,"['blackbox', 'profile', 'runtime', 'execution', 'dependency', 'lightweight', 'running', 'container', 'likely', 'form', 'complex', 'execution', 'dependency', 'inside', 'execution', 'dependency', 'arises', 'two', 'execution', 'path', 'partially', 'share', 'resulting', 'potential', 'runtime', 'performance', 'interference', 'paper', 'present', 'blackbox', 'utilizes', 'http', 'request', 'accurately', 'profile', 'internal', 'pairwise', 'dependency', 'supported', 'execution', 'path', 'target', 'profile', 'pairwise', 'dependency', 'two', 'execution', 'path', 'performance', 'interference', 'analysis', 'two', 'type', 'request', 'simultaneously', 'characterizing', 'grouping', 'execution', 'path', 'based', 'pairwise', 'dependency', 'box', 'derive', 'clear', 'dependency', 'graph', 'entire', 'backend', 'validate', 'effectiveness', 'blackbox', 'experiment', 'benchmark', 'running', 'real', 'azure']"
"Online Experiment Platform: A Microservices-based Cloud Native Application The development of cloud native technologies and web technologies is constantly innovating all aspects of web applications. As the scale of web applications continues to expand, the complexity of design, development, deployment and maintenance is getting higher and higher. The industry urgently needs a new web development paradigm to meet the upcoming challenge, so the concept of microservices comes into being, and soon becomes the preferred solution for large companies and individual developers. The emergence of public and private clouds further reduces the difficulty of implementing microservices-based applications. This article analyzes the idea of microservices architecture and its key components, then presents a microservices-based cloud native application Online experiment platform. As a complete product, its life cycle well demonstrates the advantages of microservices architecture and the practical significance of cloud native concept.",Online Experiment Platform: A Microservices-based Cloud Native Application,"The development of cloud native technologies and web technologies is constantly innovating all aspects of web applications. As the scale of web applications continues to expand, the complexity of design, development, deployment and maintenance is getting higher and higher. The industry urgently needs a new web development paradigm to meet the upcoming challenge, so the concept of microservices comes into being, and soon becomes the preferred solution for large companies and individual developers. The emergence of public and private clouds further reduces the difficulty of implementing microservices-based applications. This article analyzes the idea of microservices architecture and its key components, then presents a microservices-based cloud native application Online experiment platform. As a complete product, its life cycle well demonstrates the advantages of microservices architecture and the practical significance of cloud native concept.",IEEE conference,no,"['online', 'experiment', 'platform', 'native', 'development', 'native', 'technology', 'web', 'technology', 'constantly', 'aspect', 'web', 'scale', 'web', 'complexity', 'design', 'development', 'deployment', 'maintenance', 'getting', 'higher', 'higher', 'industry', 'need', 'new', 'web', 'development', 'paradigm', 'meet', 'challenge', 'concept', 'come', 'soon', 'becomes', 'preferred', 'solution', 'large', 'company', 'individual', 'developer', 'emergence', 'public', 'private', 'reduces', 'difficulty', 'implementing', 'article', 'analyzes', 'idea', 'key', 'present', 'native', 'online', 'experiment', 'platform', 'complete', 'product', 'life', 'cycle', 'well', 'demonstrates', 'advantage', 'practical', 'native', 'concept']"
"Design and research of University intelligent education cloud platform based on Dubbo microservice framework With the rapid development of mobile Internet, more and more people participate in online learning, online interaction and online communication. Online education has gradually become a new education model. Aiming at the cloud computing environment, this paper uses the hierarchical systematic design idea to deeply carry out the demand analysis and architecture design of smart education cloud in Colleges and universities. The system architecture design of the platform takes service and component as the core, and realizes the service encapsulation of each functional module of the platform through the micro service design of the single project architecture. At the same time, combining Dubbo microservice framework and distributed database technology, the platform's RPC communication, service discovery and traffic management capabilities are optimized, which effectively improves the intelligent management and application level of the platform.",Design and research of University intelligent education cloud platform based on Dubbo microservice framework,"With the rapid development of mobile Internet, more and more people participate in online learning, online interaction and online communication. Online education has gradually become a new education model. Aiming at the cloud computing environment, this paper uses the hierarchical systematic design idea to deeply carry out the demand analysis and architecture design of smart education cloud in Colleges and universities. The system architecture design of the platform takes service and component as the core, and realizes the service encapsulation of each functional module of the platform through the micro service design of the single project architecture. At the same time, combining Dubbo microservice framework and distributed database technology, the platform's RPC communication, service discovery and traffic management capabilities are optimized, which effectively improves the intelligent management and application level of the platform.",IEEE conference,no,"['design', 'research', 'university', 'intelligent', 'education', 'platform', 'based', 'dubbo', 'framework', 'rapid', 'development', 'mobile', 'internet', 'people', 'online', 'learning', 'online', 'interaction', 'online', 'communication', 'online', 'education', 'gradually', 'become', 'new', 'education', 'model', 'aiming', 'computing', 'environment', 'paper', 'us', 'hierarchical', 'systematic', 'design', 'idea', 'carry', 'demand', 'analysis', 'design', 'smart', 'education', 'university', 'design', 'platform', 'take', 'core', 'realizes', 'functional', 'module', 'platform', 'micro', 'design', 'single', 'project', 'time', 'combining', 'dubbo', 'framework', 'distributed', 'database', 'technology', 'platform', 'rpc', 'communication', 'discovery', 'traffic', 'management', 'capability', 'optimized', 'effectively', 'improves', 'intelligent', 'management', 'level', 'platform']"
"Sharing platform of digital specimen of wood canker based on WebGIS in Xinjiang province: architecture, design and implementation The collection, integration, analysis and sharing of digital specimens of wood canker is an important basic work for conducting relevant scientific research, education and teaching. In this study, for all kinds of users, such as scientific research, education, experts and the public, the architecture of Sharing platform of digital specimen of wood canker in Xinjiang province was designed by microservice architecture, the microservice function tree was constructed by domain-driven design method, the microservice cluster was built by using Spring Cloud technology components, and 8 kinds of microservices were developed based on WebGIS technology. The application results show that the platform is easy to use, provides data sharing and services through visualization and interactivity, and can provide decision-making data resources support for scientific research, education, monitoring, quarantine and prevention of wood canker.","Sharing platform of digital specimen of wood canker based on WebGIS in Xinjiang province: architecture, design and implementation","The collection, integration, analysis and sharing of digital specimens of wood canker is an important basic work for conducting relevant scientific research, education and teaching. In this study, for all kinds of users, such as scientific research, education, experts and the public, the architecture of Sharing platform of digital specimen of wood canker in Xinjiang province was designed by microservice architecture, the microservice function tree was constructed by domain-driven design method, the microservice cluster was built by using Spring Cloud technology components, and 8 kinds of microservices were developed based on WebGIS technology. The application results show that the platform is easy to use, provides data sharing and services through visualization and interactivity, and can provide decision-making data resources support for scientific research, education, monitoring, quarantine and prevention of wood canker.",IEEE conference,no,"['sharing', 'platform', 'digital', 'specimen', 'wood', 'canker', 'based', 'design', 'implementation', 'collection', 'integration', 'analysis', 'sharing', 'digital', 'specimen', 'wood', 'canker', 'important', 'basic', 'work', 'conducting', 'relevant', 'scientific', 'research', 'education', 'teaching', 'study', 'kind', 'user', 'scientific', 'research', 'education', 'expert', 'public', 'sharing', 'platform', 'digital', 'specimen', 'wood', 'canker', 'designed', 'function', 'tree', 'constructed', 'design', 'method', 'cluster', 'built', 'using', 'spring', 'technology', 'kind', 'developed', 'based', 'technology', 'result', 'show', 'platform', 'easy', 'use', 'provides', 'sharing', 'visualization', 'provide', 'resource', 'support', 'scientific', 'research', 'education', 'monitoring', 'prevention', 'wood', 'canker']"
"Development of the Concept and Architecture of an Automated System for Updating Physical Knowledge for Information Support of Search Design For developing an automated system for updating physical knowledge for information support of search design, it is necessary to choose a technology stack that would meet the implementation requirements. In view of the sanctions currently imposed on the Russian Federation, it is worth considering mainly open projects and/or domestic developments. We will highlight the main criteria that it is desirable to take into account when designing the architecture of an automated system to support the synthesis of new technical systems and technologies: (a) ability to store and process large amounts of data; (b) unification access for all data analysis procedures; (c) maximum automation of all stages; (d) modularity of the structure, focus on the expansion of functionality; (e) focus on open source solutions and software of domestic manufacturers, excluding rigid binding to paid foreign solutions. As a result of the work done, various aspects of the implementation of the required automated system were analyzed. A review of various software systems and cloud products showed that the concept of building data lakes (Data Lake) in conjunction with the distributed processing tools of the Apache Hadoop ecosystem is used for big data processing. An architecture framework based on a centralized data warehouse and Hadoop components is proposed. It will be possible to increase the functionality of the platform by adding new microservices that connect to the storage and distributed processing tools via the API, as well as using a single web service for managing and displaying data analysis results from these microservices.",Development of the Concept and Architecture of an Automated System for Updating Physical Knowledge for Information Support of Search Design,"For developing an automated system for updating physical knowledge for information support of search design, it is necessary to choose a technology stack that would meet the implementation requirements. In view of the sanctions currently imposed on the Russian Federation, it is worth considering mainly open projects and/or domestic developments. We will highlight the main criteria that it is desirable to take into account when designing the architecture of an automated system to support the synthesis of new technical systems and technologies: (a) ability to store and process large amounts of data; (b) unification access for all data analysis procedures; (c) maximum automation of all stages; (d) modularity of the structure, focus on the expansion of functionality; (e) focus on open source solutions and software of domestic manufacturers, excluding rigid binding to paid foreign solutions. As a result of the work done, various aspects of the implementation of the required automated system were analyzed. A review of various software systems and cloud products showed that the concept of building data lakes (Data Lake) in conjunction with the distributed processing tools of the Apache Hadoop ecosystem is used for big data processing. An architecture framework based on a centralized data warehouse and Hadoop components is proposed. It will be possible to increase the functionality of the platform by adding new microservices that connect to the storage and distributed processing tools via the API, as well as using a single web service for managing and displaying data analysis results from these microservices.",IEEE conference,no,"['development', 'concept', 'automated', 'updating', 'physical', 'knowledge', 'information', 'support', 'search', 'design', 'developing', 'automated', 'updating', 'physical', 'knowledge', 'information', 'support', 'search', 'design', 'necessary', 'choose', 'technology', 'stack', 'would', 'meet', 'implementation', 'requirement', 'view', 'currently', 'considering', 'mainly', 'open', 'project', 'development', 'highlight', 'main', 'criterion', 'desirable', 'take', 'account', 'designing', 'automated', 'support', 'synthesis', 'new', 'technical', 'technology', 'ability', 'store', 'process', 'large', 'amount', 'b', 'access', 'analysis', 'procedure', 'c', 'maximum', 'automation', 'stage', 'modularity', 'structure', 'focus', 'expansion', 'functionality', 'focus', 'open', 'source', 'solution', 'solution', 'result', 'work', 'done', 'various', 'aspect', 'implementation', 'required', 'automated', 'analyzed', 'review', 'various', 'product', 'showed', 'concept', 'building', 'lake', 'lake', 'distributed', 'processing', 'tool', 'apache', 'ecosystem', 'used', 'big', 'processing', 'framework', 'based', 'centralized', 'proposed', 'possible', 'increase', 'functionality', 'platform', 'adding', 'new', 'connect', 'storage', 'distributed', 'processing', 'tool', 'via', 'api', 'well', 'using', 'single', 'web', 'managing', 'analysis', 'result']"
"Dynamic Micro-Frontends Economic and business related demands of decreasing time to market and efficient production in an ever more efficient manner have manifested themselves in software development as well. They are most visible in the use of streamlined development approaches and production of aggressively reusable components, on both server and client sides of modern applications. On the server side, the modern development is dominated by tendency to use microservice based architectures, while on the client side, the same idea is realized through the use of micro-frontends. Micro-frontend applications represent a natural counterpart to numerous segmented and compartmentalized backend services. One of the issues related to micro-fronted approach is relatively low support for rapid deployment and evolution of individual components. In this paper we present a novel approach that enables fully dynamic use and deployment of micro-frontends, synchronized with their respective micro-services, both in development and in production stages. We also show possible use cases beyond classic scenarios present in existing practice of micro-frontend applications.",Dynamic Micro-Frontends,"Economic and business related demands of decreasing time to market and efficient production in an ever more efficient manner have manifested themselves in software development as well. They are most visible in the use of streamlined development approaches and production of aggressively reusable components, on both server and client sides of modern applications. On the server side, the modern development is dominated by tendency to use microservice based architectures, while on the client side, the same idea is realized through the use of micro-frontends. Micro-frontend applications represent a natural counterpart to numerous segmented and compartmentalized backend services. One of the issues related to micro-fronted approach is relatively low support for rapid deployment and evolution of individual components. In this paper we present a novel approach that enables fully dynamic use and deployment of micro-frontends, synchronized with their respective micro-services, both in development and in production stages. We also show possible use cases beyond classic scenarios present in existing practice of micro-frontend applications.",IEEE conference,no,"['dynamic', 'economic', 'business', 'related', 'demand', 'decreasing', 'time', 'market', 'efficient', 'production', 'ever', 'efficient', 'manner', 'development', 'well', 'use', 'streamlined', 'development', 'production', 'reusable', 'server', 'client', 'side', 'modern', 'server', 'side', 'modern', 'development', 'use', 'based', 'client', 'side', 'idea', 'realized', 'use', 'represent', 'natural', 'counterpart', 'numerous', 'backend', 'one', 'issue', 'related', 'relatively', 'low', 'support', 'rapid', 'deployment', 'evolution', 'individual', 'paper', 'present', 'novel', 'enables', 'fully', 'dynamic', 'use', 'deployment', 'synchronized', 'respective', 'development', 'production', 'stage', 'also', 'show', 'possible', 'use', 'case', 'beyond', 'classic', 'scenario', 'present', 'existing', 'practice']"
"Automated Testing and Resilience of Microservice’s Network-link using Istio Service Mesh Microservices technology has gained considerable popularity in software design to deploy complex applications in the form of micro-modular microservice components. Each service is implemented as an autonomous system, and its internal constituent data can be accessed via a network interface. Such architecture increases the complexity of the network because each module is a separate entity for development and operations. A fault in any service affects the operation of another service and could completely break the application. It is, therefore, necessary to create a framework for the systematic testing and resilience of the network link in microservices, independent of the programming language and business logic. It helps the network administrator track the cause of the fault. In this paper, we have shown the use of the service mesh Istio to monitor communication between microservices and to develop automated testing and resilience. Istio provides various types of fault injectors for communication links between services. A Locust load testing tool is used to exert a microservice load. The faulty link is located via the Jaeger and Grafana dashboard within the Istio frame. For resilience or correction of the fault, a new connection is temporarily established between the affected microservice by deploying redundant services. In addition, microservices scaling and the implementation of the circuit breaker have been shown to remedy network congestion. The setup is demonstrated in the Kubernetes cluster with the Hipster shop e-commerce application.",Automated Testing and Resilience of Microservice’s Network-link using Istio Service Mesh,"Microservices technology has gained considerable popularity in software design to deploy complex applications in the form of micro-modular microservice components. Each service is implemented as an autonomous system, and its internal constituent data can be accessed via a network interface. Such architecture increases the complexity of the network because each module is a separate entity for development and operations. A fault in any service affects the operation of another service and could completely break the application. It is, therefore, necessary to create a framework for the systematic testing and resilience of the network link in microservices, independent of the programming language and business logic. It helps the network administrator track the cause of the fault. In this paper, we have shown the use of the service mesh Istio to monitor communication between microservices and to develop automated testing and resilience. Istio provides various types of fault injectors for communication links between services. A Locust load testing tool is used to exert a microservice load. The faulty link is located via the Jaeger and Grafana dashboard within the Istio frame. For resilience or correction of the fault, a new connection is temporarily established between the affected microservice by deploying redundant services. In addition, microservices scaling and the implementation of the circuit breaker have been shown to remedy network congestion. The setup is demonstrated in the Kubernetes cluster with the Hipster shop e-commerce application.",IEEE conference,no,"['automated', 'testing', 'resilience', 'using', 'istio', 'mesh', 'technology', 'gained', 'popularity', 'design', 'deploy', 'complex', 'form', 'implemented', 'autonomous', 'internal', 'constituent', 'accessed', 'via', 'network', 'interface', 'increase', 'complexity', 'network', 'module', 'separate', 'entity', 'development', 'operation', 'fault', 'affect', 'operation', 'another', 'could', 'completely', 'break', 'therefore', 'necessary', 'create', 'framework', 'systematic', 'testing', 'resilience', 'network', 'link', 'independent', 'programming', 'language', 'business', 'logic', 'help', 'network', 'administrator', 'track', 'cause', 'fault', 'paper', 'shown', 'use', 'mesh', 'istio', 'monitor', 'communication', 'develop', 'automated', 'testing', 'resilience', 'istio', 'provides', 'various', 'type', 'fault', 'communication', 'link', 'load', 'testing', 'tool', 'used', 'load', 'faulty', 'link', 'located', 'via', 'jaeger', 'grafana', 'dashboard', 'within', 'istio', 'frame', 'resilience', 'fault', 'new', 'connection', 'established', 'affected', 'deploying', 'redundant', 'addition', 'scaling', 'implementation', 'circuit', 'shown', 'network', 'congestion', 'setup', 'demonstrated', 'kubernetes', 'cluster', 'shop']"
"Microservices Upgrade in Clouds: Dynamic Management of Version Dependencies and User Load In today's cloud computing environments, where scalability, agility, and resiliency are paramount, microservices architecture stands out as a fundamental keystone of modern software development. While microservices are designed as independent components communicating through well-defined APIs, maintaining and upgrading them pose unique challenges, including version compatibility, dependency management, and service continuity. These challenges become intricate when multiple instances of a specific microservice are deployed, utilizing load balancing to distribute users and offering different functionalities simultaneously. This paper proposes a heuristic algorithm to address the microservices upgrading problem. The proposed algorithm migrates users gradually and effectively by managing version dependencies, user load, considering propagation impact, multiple instances, and resource constraints. The simulation results demonstrate the superiority of our algorithm over existing benchmarks in terms of resource usage cost and the number of new version instances.",Microservices Upgrade in Clouds: Dynamic Management of Version Dependencies and User Load,"In today's cloud computing environments, where scalability, agility, and resiliency are paramount, microservices architecture stands out as a fundamental keystone of modern software development. While microservices are designed as independent components communicating through well-defined APIs, maintaining and upgrading them pose unique challenges, including version compatibility, dependency management, and service continuity. These challenges become intricate when multiple instances of a specific microservice are deployed, utilizing load balancing to distribute users and offering different functionalities simultaneously. This paper proposes a heuristic algorithm to address the microservices upgrading problem. The proposed algorithm migrates users gradually and effectively by managing version dependencies, user load, considering propagation impact, multiple instances, and resource constraints. The simulation results demonstrate the superiority of our algorithm over existing benchmarks in terms of resource usage cost and the number of new version instances.",IEEE conference,no,"['upgrade', 'dynamic', 'management', 'version', 'dependency', 'user', 'load', 'today', 'computing', 'environment', 'scalability', 'agility', 'resiliency', 'paramount', 'stand', 'fundamental', 'modern', 'development', 'designed', 'independent', 'communicating', 'apis', 'maintaining', 'upgrading', 'pose', 'unique', 'challenge', 'including', 'version', 'compatibility', 'dependency', 'management', 'continuity', 'challenge', 'become', 'intricate', 'multiple', 'instance', 'specific', 'deployed', 'utilizing', 'load', 'balancing', 'distribute', 'user', 'offering', 'different', 'functionality', 'simultaneously', 'paper', 'proposes', 'heuristic', 'algorithm', 'address', 'upgrading', 'problem', 'proposed', 'algorithm', 'user', 'gradually', 'effectively', 'managing', 'version', 'dependency', 'user', 'load', 'considering', 'propagation', 'impact', 'multiple', 'instance', 'resource', 'constraint', 'simulation', 'result', 'demonstrate', 'algorithm', 'existing', 'benchmark', 'term', 'resource', 'usage', 'cost', 'number', 'new', 'version', 'instance']"
"A Retrospective Engineering Analysis of Human-AI Teams Using the Sidekick Principles The speed of development of Artificial Intelligence (AI) capabilities outpaces that of human systems engineering, particularly for the integration of human-AI teams (HAT) in production-level software. The emergence of frameworks for the principled design and development of hybrid systems offers opportunities to close this gap: They can help identify which common HAT components should be built and matured to accelerate the engineering of such hybrid systems. Leveraging the sidekick principles of human-AI teaming in a review of recent efforts, we identified a prioritized list of system requirements for reusable HAT components. We share these insights with a specific emphasis on the analytical microservices we believe are key to instantiating the sidekick principles.",A Retrospective Engineering Analysis of Human-AI Teams Using the Sidekick Principles,"The speed of development of Artificial Intelligence (AI) capabilities outpaces that of human systems engineering, particularly for the integration of human-AI teams (HAT) in production-level software. The emergence of frameworks for the principled design and development of hybrid systems offers opportunities to close this gap: They can help identify which common HAT components should be built and matured to accelerate the engineering of such hybrid systems. Leveraging the sidekick principles of human-AI teaming in a review of recent efforts, we identified a prioritized list of system requirements for reusable HAT components. We share these insights with a specific emphasis on the analytical microservices we believe are key to instantiating the sidekick principles.",IEEE conference,no,"['engineering', 'analysis', 'team', 'using', 'sidekick', 'principle', 'speed', 'development', 'artificial', 'intelligence', 'ai', 'capability', 'human', 'engineering', 'particularly', 'integration', 'team', 'hat', 'emergence', 'framework', 'design', 'development', 'hybrid', 'offer', 'opportunity', 'close', 'gap', 'help', 'identify', 'common', 'hat', 'built', 'accelerate', 'engineering', 'hybrid', 'leveraging', 'sidekick', 'principle', 'review', 'recent', 'effort', 'identified', 'list', 'requirement', 'reusable', 'hat', 'share', 'insight', 'specific', 'emphasis', 'analytical', 'believe', 'key', 'sidekick', 'principle']"
"A microservices architecture for collaborative document editing enhanced with face recognition Modern web applications can now provide rich and dynamic user experiences, such as allowing multiple users to collaboratively edit rich-text documents in real-time from multiple devices. Application architectures are evolving to support the development and deployment of such interactive functionality by decoupling software components into microservices. This paper introduces the architecture and the implementation of a collaborative rich-text editor that makes use of microservices to enable and enhance its scalable co-editing functionality. This includes microservices for synchronizing unstructured text using operational transformations, for chat functionality, and for detecting and recognizing faces in images added to the editor. The architecture makes use of Docker to allow for the development and testing of individual services as separate containers enabling seamless deployment across the available network of computers and other computing devices. The system will be demonstrated by showing how microservices make it possible for multiple users to co-edit a document where images containing faces are added and recognized as part of the document content, thereby supporting the document creation process.",A microservices architecture for collaborative document editing enhanced with face recognition,"Modern web applications can now provide rich and dynamic user experiences, such as allowing multiple users to collaboratively edit rich-text documents in real-time from multiple devices. Application architectures are evolving to support the development and deployment of such interactive functionality by decoupling software components into microservices. This paper introduces the architecture and the implementation of a collaborative rich-text editor that makes use of microservices to enable and enhance its scalable co-editing functionality. This includes microservices for synchronizing unstructured text using operational transformations, for chat functionality, and for detecting and recognizing faces in images added to the editor. The architecture makes use of Docker to allow for the development and testing of individual services as separate containers enabling seamless deployment across the available network of computers and other computing devices. The system will be demonstrated by showing how microservices make it possible for multiple users to co-edit a document where images containing faces are added and recognized as part of the document content, thereby supporting the document creation process.",IEEE conference,no,"['collaborative', 'document', 'enhanced', 'face', 'recognition', 'modern', 'web', 'provide', 'rich', 'dynamic', 'user', 'experience', 'allowing', 'multiple', 'user', 'document', 'multiple', 'device', 'evolving', 'support', 'development', 'deployment', 'interactive', 'functionality', 'decoupling', 'paper', 'introduces', 'implementation', 'collaborative', 'make', 'use', 'enable', 'enhance', 'scalable', 'functionality', 'includes', 'text', 'using', 'operational', 'transformation', 'functionality', 'detecting', 'face', 'image', 'added', 'make', 'use', 'docker', 'allow', 'development', 'testing', 'individual', 'separate', 'container', 'enabling', 'seamless', 'deployment', 'across', 'available', 'network', 'computer', 'computing', 'device', 'demonstrated', 'showing', 'make', 'possible', 'multiple', 'user', 'document', 'image', 'containing', 'face', 'added', 'recognized', 'part', 'document', 'content', 'thereby', 'supporting', 'document', 'creation', 'process']"
"Synthetic to Real-World: Insights on Microservices-Based Application Benchmarks This paper focuses on implementing a realis-tic microservice-based application from DeathStarBench into μBench and the challenges associated with it. Unlike traditional monolithic applications, microservice apps comprise multiple smaller components that are comparatively complex. This makes benchmarking essential. Benchmarking is a process of evaluating and comparing the performance of a system, such as efficiency, effectiveness, quality, or cost, to assess how well a particular entity is performing compared to a reference point, often referred to as a benchmark. A benchmarking tool that employs near real-world applications, extending beyond the capabilities of the existing tools. The inclusion of configuring the microservices from scratch allows for a more comprehensive understanding of application performance, which is crucial for today's complex cloud-based applications [1]. Through synthetic benchmarking, μBench simulates real-world conditions, offering a more com-plete performance analysis. In this paper, we expand the tool μBench to effectively demonstrate its proficiency in deploying and benchmarking a diverse range of microservice applications by mimicking real-world applications like DeathStarBench and Teastore, analysing the performance and resource utilisation through various tools like Kiali, Prometheus and Jaeger.",Synthetic to Real-World: Insights on Microservices-Based Application Benchmarks,"This paper focuses on implementing a realis-tic microservice-based application from DeathStarBench into μBench and the challenges associated with it. Unlike traditional monolithic applications, microservice apps comprise multiple smaller components that are comparatively complex. This makes benchmarking essential. Benchmarking is a process of evaluating and comparing the performance of a system, such as efficiency, effectiveness, quality, or cost, to assess how well a particular entity is performing compared to a reference point, often referred to as a benchmark. A benchmarking tool that employs near real-world applications, extending beyond the capabilities of the existing tools. The inclusion of configuring the microservices from scratch allows for a more comprehensive understanding of application performance, which is crucial for today's complex cloud-based applications [1]. Through synthetic benchmarking, μBench simulates real-world conditions, offering a more com-plete performance analysis. In this paper, we expand the tool μBench to effectively demonstrate its proficiency in deploying and benchmarking a diverse range of microservice applications by mimicking real-world applications like DeathStarBench and Teastore, analysing the performance and resource utilisation through various tools like Kiali, Prometheus and Jaeger.",IEEE conference,no,"['synthetic', 'insight', 'benchmark', 'paper', 'focus', 'implementing', 'μbench', 'challenge', 'associated', 'unlike', 'traditional', 'monolithic', 'apps', 'comprise', 'multiple', 'smaller', 'complex', 'make', 'benchmarking', 'essential', 'benchmarking', 'process', 'evaluating', 'comparing', 'performance', 'efficiency', 'effectiveness', 'quality', 'cost', 'assess', 'well', 'particular', 'entity', 'performing', 'compared', 'reference', 'point', 'often', 'referred', 'benchmark', 'benchmarking', 'tool', 'employ', 'near', 'extending', 'beyond', 'capability', 'existing', 'tool', 'inclusion', 'configuring', 'scratch', 'allows', 'comprehensive', 'understanding', 'performance', 'crucial', 'today', 'complex', 'synthetic', 'benchmarking', 'μbench', 'condition', 'offering', 'performance', 'analysis', 'paper', 'tool', 'μbench', 'effectively', 'demonstrate', 'deploying', 'benchmarking', 'diverse', 'range', 'like', 'performance', 'resource', 'various', 'tool', 'like', 'prometheus', 'jaeger']"
"MV4MS: A Spring Cloud based Framework for the Co-Deployment of Multi-Version Microservices Agile development and the loose coupling of microservices, make continuous delivery/deployment of large, complex service systems become much easier. The microservices are upgraded and released independently and have their own independent version trees. For compatibility, multiple versions of one microservice are to be deployed in the same system to offer slightly different functionalities to different users simultaneously. However, loosely-coupling does not mean multiple microservices keep absolutely independent but there are more or less dependencies among them, and such dependencies occur not only on functionalities but also on the version issue, too. Existing microservice frameworks have no enough capability for multi-version co-deployment and the corresponding version-oriented dependency management. In this paper, a Spring Cloud based framework called MV4MS is introduced for this challenge. It extracts version information from source codes of microservices, builds version dependencies, packs and deploys requisite versions of microservices, and routes user requests to desired versions at run-time. Architecture of MV4MS and detailed design of its components are elaborately introduced. Experiments are conducted in AWS cloud environment, and results show that our framework could reduce the complexity of multi-version microservice co-deployment and ensure the correctness of routing between multi-version microservice.",MV4MS: A Spring Cloud based Framework for the Co-Deployment of Multi-Version Microservices,"Agile development and the loose coupling of microservices, make continuous delivery/deployment of large, complex service systems become much easier. The microservices are upgraded and released independently and have their own independent version trees. For compatibility, multiple versions of one microservice are to be deployed in the same system to offer slightly different functionalities to different users simultaneously. However, loosely-coupling does not mean multiple microservices keep absolutely independent but there are more or less dependencies among them, and such dependencies occur not only on functionalities but also on the version issue, too. Existing microservice frameworks have no enough capability for multi-version co-deployment and the corresponding version-oriented dependency management. In this paper, a Spring Cloud based framework called MV4MS is introduced for this challenge. It extracts version information from source codes of microservices, builds version dependencies, packs and deploys requisite versions of microservices, and routes user requests to desired versions at run-time. Architecture of MV4MS and detailed design of its components are elaborately introduced. Experiments are conducted in AWS cloud environment, and results show that our framework could reduce the complexity of multi-version microservice co-deployment and ensure the correctness of routing between multi-version microservice.",IEEE conference,no,"['spring', 'based', 'framework', 'agile', 'development', 'coupling', 'make', 'continuous', 'large', 'complex', 'become', 'much', 'easier', 'upgraded', 'released', 'independently', 'independent', 'version', 'tree', 'compatibility', 'multiple', 'version', 'one', 'deployed', 'offer', 'different', 'functionality', 'different', 'user', 'simultaneously', 'however', 'mean', 'multiple', 'keep', 'independent', 'less', 'dependency', 'among', 'dependency', 'occur', 'functionality', 'also', 'version', 'issue', 'existing', 'framework', 'enough', 'capability', 'corresponding', 'dependency', 'management', 'paper', 'spring', 'based', 'framework', 'called', 'introduced', 'challenge', 'extract', 'version', 'information', 'source', 'code', 'build', 'version', 'dependency', 'deploys', 'version', 'route', 'user', 'request', 'desired', 'version', 'detailed', 'design', 'introduced', 'experiment', 'conducted', 'aws', 'environment', 'result', 'show', 'framework', 'could', 'reduce', 'complexity', 'ensure', 'correctness', 'routing']"
"A Framework for Monitoring Microservice-Oriented Cloud Applications in Heterogeneous Virtualization Environments Microservices have emerged as a new approach for developing and deploying cloud applications that require higher levels of agility, scale, and reliability. To this end, a microservice-based cloud application architecture advocates decomposition of monolithic application components into independent software components called ""microservices"". As the independent microservices can be developed, deployed, and updated independently of each other, it leads to complex run-time performance monitoring and management challenges. To solve this problem, we propose a generic monitoring framework, Multi-microservices Multi-virtualization Multi-cloud (M3) that monitors the performance of microservices deployed across heterogeneous virtualization platforms in a multi-cloud environment. We validated the efficacy and efficiency of M3 using a Book-Shop application executing across AWS and Azure.",A Framework for Monitoring Microservice-Oriented Cloud Applications in Heterogeneous Virtualization Environments,"Microservices have emerged as a new approach for developing and deploying cloud applications that require higher levels of agility, scale, and reliability. To this end, a microservice-based cloud application architecture advocates decomposition of monolithic application components into independent software components called ""microservices"". As the independent microservices can be developed, deployed, and updated independently of each other, it leads to complex run-time performance monitoring and management challenges. To solve this problem, we propose a generic monitoring framework, Multi-microservices Multi-virtualization Multi-cloud (M3) that monitors the performance of microservices deployed across heterogeneous virtualization platforms in a multi-cloud environment. We validated the efficacy and efficiency of M3 using a Book-Shop application executing across AWS and Azure.",IEEE conference,no,"['framework', 'monitoring', 'heterogeneous', 'virtualization', 'environment', 'emerged', 'new', 'developing', 'deploying', 'require', 'higher', 'level', 'agility', 'scale', 'reliability', 'end', 'decomposition', 'monolithic', 'independent', 'called', 'independent', 'developed', 'deployed', 'updated', 'independently', 'lead', 'complex', 'performance', 'monitoring', 'management', 'challenge', 'solve', 'problem', 'propose', 'generic', 'monitoring', 'framework', 'monitor', 'performance', 'deployed', 'across', 'heterogeneous', 'virtualization', 'platform', 'environment', 'validated', 'efficacy', 'efficiency', 'using', 'executing', 'across', 'aws', 'azure']"
"Infrastructure-as-Code for Data-Intensive Architectures: A Model-Driven Development Approach As part of the DevOps tactics, Infrastructure-as-Code (IaC) provides the ability to create, configure, and manage complex infrastructures by means of executable code. Writing IaC, however, is not an easy task, since it requires blending different infrastructure programming languages and abstractions, each specialized on a particular aspect of infrastructure creation, configuration, and management. Moreover, the more the architectures become large and complex (e.g. Data-Intensive or Microservice-based architectures), the more dire the need of IaC becomes. The goal of this paper is to exploit Model-Driven Engineering (MDE) to create language-agnostic models that are then automatically transformed into IaC. We focus on the domain of Data-Intensive Applications as these typically exploit complex infrastructures which demand sophisticated and fine-grained configuration and re-configuration - we show that, through our approach, called DICER, it is possible to create complex IaC with significant amounts of time savings, both in IaC design as well as deployment and re-deployment times.",Infrastructure-as-Code for Data-Intensive Architectures: A Model-Driven Development Approach,"As part of the DevOps tactics, Infrastructure-as-Code (IaC) provides the ability to create, configure, and manage complex infrastructures by means of executable code. Writing IaC, however, is not an easy task, since it requires blending different infrastructure programming languages and abstractions, each specialized on a particular aspect of infrastructure creation, configuration, and management. Moreover, the more the architectures become large and complex (e.g. Data-Intensive or Microservice-based architectures), the more dire the need of IaC becomes. The goal of this paper is to exploit Model-Driven Engineering (MDE) to create language-agnostic models that are then automatically transformed into IaC. We focus on the domain of Data-Intensive Applications as these typically exploit complex infrastructures which demand sophisticated and fine-grained configuration and re-configuration - we show that, through our approach, called DICER, it is possible to create complex IaC with significant amounts of time savings, both in IaC design as well as deployment and re-deployment times.",IEEE conference,no,"['development', 'part', 'devops', 'tactic', 'iac', 'provides', 'ability', 'create', 'configure', 'manage', 'complex', 'infrastructure', 'mean', 'executable', 'code', 'writing', 'iac', 'however', 'easy', 'task', 'since', 'requires', 'different', 'infrastructure', 'programming', 'language', 'abstraction', 'specialized', 'particular', 'aspect', 'infrastructure', 'creation', 'configuration', 'management', 'moreover', 'become', 'large', 'complex', 'need', 'iac', 'becomes', 'goal', 'paper', 'exploit', 'engineering', 'create', 'model', 'automatically', 'transformed', 'iac', 'focus', 'domain', 'typically', 'exploit', 'complex', 'infrastructure', 'demand', 'sophisticated', 'configuration', 'show', 'called', 'possible', 'create', 'complex', 'iac', 'significant', 'amount', 'time', 'saving', 'iac', 'design', 'well', 'deployment', 'time']"
"Dynamic Analysis Pipeline in Real Time Monitoring Scenario Social networks offer researchers a unique opportunity to study human communication and social phenomena on an unprecedented scale. However, the variability in the amount of data generated at different times poses a challenge to research in this area. This paper presents an analysis pipeline that uses Twitter data to efficiently process and analyze social media posts in real time. It does not require resources to be designed for maximum load. The approach is based on three key components: implementing analysis processes as independent microservices, using a publish-subscribe communication system, and implementing automatic scaling mechanisms. These factors enable a flexible, robust, and scalable analysis pipeline. It can dynamically adapt to changing workloads and ensure optimal resource utilization.",Dynamic Analysis Pipeline in Real Time Monitoring Scenario,"Social networks offer researchers a unique opportunity to study human communication and social phenomena on an unprecedented scale. However, the variability in the amount of data generated at different times poses a challenge to research in this area. This paper presents an analysis pipeline that uses Twitter data to efficiently process and analyze social media posts in real time. It does not require resources to be designed for maximum load. The approach is based on three key components: implementing analysis processes as independent microservices, using a publish-subscribe communication system, and implementing automatic scaling mechanisms. These factors enable a flexible, robust, and scalable analysis pipeline. It can dynamically adapt to changing workloads and ensure optimal resource utilization.",IEEE conference,no,"['dynamic', 'analysis', 'pipeline', 'real', 'time', 'monitoring', 'scenario', 'social', 'network', 'offer', 'researcher', 'unique', 'opportunity', 'study', 'human', 'communication', 'social', 'phenomenon', 'unprecedented', 'scale', 'however', 'variability', 'amount', 'generated', 'different', 'time', 'pose', 'challenge', 'research', 'area', 'paper', 'present', 'analysis', 'pipeline', 'us', 'twitter', 'efficiently', 'process', 'analyze', 'social', 'medium', 'post', 'real', 'time', 'require', 'resource', 'designed', 'maximum', 'load', 'based', 'three', 'key', 'implementing', 'analysis', 'process', 'independent', 'using', 'communication', 'implementing', 'automatic', 'scaling', 'mechanism', 'factor', 'enable', 'flexible', 'robust', 'scalable', 'analysis', 'pipeline', 'dynamically', 'adapt', 'changing', 'workload', 'ensure', 'optimal', 'resource', 'utilization']"
"ViCE Registry: An Image Registry for Virtual Collaborative Environments The paper presents a concept and an implementation for an image registry for virtual collaborative environments (ViCE). This cross-platform and cross-organizational image registry bridges gaps between execution environment platforms and user communities. The presented concept consists of a conceptual architecture and a sophisticated set of metadata fields to describe images as virtual environments. The main challenge is the wide spread definition of an image. The terminology defines execution environments, which consist of runtime technologies (virtual machines, containers, applications) and a management layer (basic management, cloud computing, container clusters, job schedulers). An execution environment runs a deployable implicit or declarative image to build a virtual environment. With this abstraction the image registry can share virtual environment across Cloud computing, HPC, classroom setups, with any of KVM, Docker, Singularity, etc. in use. The open source implementation is written in Go and presented with a scalable microservice architecture, using Couchbase as metadata store and RabbitMQ as communication hub between software components.",ViCE Registry: An Image Registry for Virtual Collaborative Environments,"The paper presents a concept and an implementation for an image registry for virtual collaborative environments (ViCE). This cross-platform and cross-organizational image registry bridges gaps between execution environment platforms and user communities. The presented concept consists of a conceptual architecture and a sophisticated set of metadata fields to describe images as virtual environments. The main challenge is the wide spread definition of an image. The terminology defines execution environments, which consist of runtime technologies (virtual machines, containers, applications) and a management layer (basic management, cloud computing, container clusters, job schedulers). An execution environment runs a deployable implicit or declarative image to build a virtual environment. With this abstraction the image registry can share virtual environment across Cloud computing, HPC, classroom setups, with any of KVM, Docker, Singularity, etc. in use. The open source implementation is written in Go and presented with a scalable microservice architecture, using Couchbase as metadata store and RabbitMQ as communication hub between software components.",IEEE conference,no,"['registry', 'image', 'registry', 'virtual', 'collaborative', 'environment', 'paper', 'present', 'concept', 'implementation', 'image', 'registry', 'virtual', 'collaborative', 'environment', 'image', 'registry', 'bridge', 'gap', 'execution', 'environment', 'platform', 'user', 'community', 'presented', 'concept', 'consists', 'conceptual', 'sophisticated', 'set', 'metadata', 'field', 'describe', 'image', 'virtual', 'environment', 'main', 'challenge', 'wide', 'spread', 'definition', 'image', 'defines', 'execution', 'environment', 'consist', 'runtime', 'technology', 'virtual', 'machine', 'container', 'management', 'layer', 'basic', 'management', 'computing', 'container', 'cluster', 'job', 'scheduler', 'execution', 'environment', 'run', 'deployable', 'declarative', 'image', 'build', 'virtual', 'environment', 'abstraction', 'image', 'registry', 'share', 'virtual', 'environment', 'across', 'computing', 'hpc', 'setup', 'docker', 'etc', 'use', 'open', 'source', 'implementation', 'written', 'go', 'presented', 'scalable', 'using', 'metadata', 'store', 'rabbitmq', 'communication', 'hub']"
"5GC-Observer: a Non-intrusive Observability Framework for Cloud Native 5G System Telco stakeholders are developing a deeper understanding of cloud native technologies and adopting them faster than few years ago. It is undeniable that migrating legacy telco applications to microservice-based architectures accelerates and facilitates the development of new network services while offering a high level of granularity. However, cloud native raises new operational challenges. In order to achieve an efficient management of network services, new solutions are required to monitor and track widely distributed cloud native network functions while considering their specificity. In this paper, we propose an innovative framework, 5GC-Observer, for the observability of cloud native 5G network services. To the best of our knowledge, no such a solution has been found to date. To achieve its goal, 5GC-Observer relies on the eBPF technology to monitor the network traffic circulating between the 5G core components and report telemetry data. Besides, we leverage a statistical method to detect Quality of Service degradation based on reported telemetry data. Such an approach highlights the richness of the data acquired by our solution and its capability to detect unexpected network-related anomalies. The latter are not detectable through standard observability solutions. Performance evaluation shows that our solution generates low overhead while giving insight into the 5G core system and its internal and external exchanges.",5GC-Observer: a Non-intrusive Observability Framework for Cloud Native 5G System,"Telco stakeholders are developing a deeper understanding of cloud native technologies and adopting them faster than few years ago. It is undeniable that migrating legacy telco applications to microservice-based architectures accelerates and facilitates the development of new network services while offering a high level of granularity. However, cloud native raises new operational challenges. In order to achieve an efficient management of network services, new solutions are required to monitor and track widely distributed cloud native network functions while considering their specificity. In this paper, we propose an innovative framework, 5GC-Observer, for the observability of cloud native 5G network services. To the best of our knowledge, no such a solution has been found to date. To achieve its goal, 5GC-Observer relies on the eBPF technology to monitor the network traffic circulating between the 5G core components and report telemetry data. Besides, we leverage a statistical method to detect Quality of Service degradation based on reported telemetry data. Such an approach highlights the richness of the data acquired by our solution and its capability to detect unexpected network-related anomalies. The latter are not detectable through standard observability solutions. Performance evaluation shows that our solution generates low overhead while giving insight into the 5G core system and its internal and external exchanges.",IEEE conference,no,"['observability', 'framework', 'native', 'telco', 'stakeholder', 'developing', 'understanding', 'native', 'technology', 'adopting', 'faster', 'year', 'ago', 'migrating', 'legacy', 'telco', 'facilitates', 'development', 'new', 'network', 'offering', 'high', 'level', 'granularity', 'however', 'native', 'raise', 'new', 'operational', 'challenge', 'order', 'achieve', 'efficient', 'management', 'network', 'new', 'solution', 'required', 'monitor', 'track', 'widely', 'distributed', 'native', 'network', 'function', 'considering', 'specificity', 'paper', 'propose', 'innovative', 'framework', 'observability', 'native', 'network', 'best', 'knowledge', 'solution', 'found', 'achieve', 'goal', 'relies', 'ebpf', 'technology', 'monitor', 'network', 'traffic', 'core', 'report', 'telemetry', 'besides', 'leverage', 'statistical', 'method', 'detect', 'quality', 'degradation', 'based', 'reported', 'telemetry', 'highlight', 'acquired', 'solution', 'capability', 'detect', 'unexpected', 'anomaly', 'latter', 'standard', 'observability', 'solution', 'performance', 'evaluation', 'show', 'solution', 'generates', 'low', 'overhead', 'giving', 'insight', 'core', 'internal', 'external', 'exchange']"
"On Black-Box Monitoring Techniques for Multi-Component Services Despite the advantages of microservice and function-oriented architectures, there is an increase in complexity to monitor such highly dynamic systems. In this paper, we analyze two distinct methods to tackle the monitoring problem in a system with reduced instrumentation. Our goal is to understand the feasibility of such approach with one specific driver: simplicity. We aim to determine the extent to which it is possible to characterize the state of two generic tandem processes, using as little information as possible. To answer this question, we resorted to a simulation approach. Using a queue system, we simulated two services, that we could manipulate with distinct operation sets for each module. We used the total response time seen upstream of the system. Having this setup and metric, we applied two distinct methods to analyze the results. First, we used supervised machine learning algorithms to identify where the bottleneck is happening. Secondly, we used an exponential decomposition to identify the occupation in the two components in a more black-box fashion. Results show that both methodologies have their advantages and limitations. The separation of the signal more accurately identifies occupation in low occupied resources, but when a service is totally dominating the overall time, it lacks precision. The machine learning has a more stable error, but needs the training set. This study suggest that a black-box occupation approach with both techniques is possible and very useful.",On Black-Box Monitoring Techniques for Multi-Component Services,"Despite the advantages of microservice and function-oriented architectures, there is an increase in complexity to monitor such highly dynamic systems. In this paper, we analyze two distinct methods to tackle the monitoring problem in a system with reduced instrumentation. Our goal is to understand the feasibility of such approach with one specific driver: simplicity. We aim to determine the extent to which it is possible to characterize the state of two generic tandem processes, using as little information as possible. To answer this question, we resorted to a simulation approach. Using a queue system, we simulated two services, that we could manipulate with distinct operation sets for each module. We used the total response time seen upstream of the system. Having this setup and metric, we applied two distinct methods to analyze the results. First, we used supervised machine learning algorithms to identify where the bottleneck is happening. Secondly, we used an exponential decomposition to identify the occupation in the two components in a more black-box fashion. Results show that both methodologies have their advantages and limitations. The separation of the signal more accurately identifies occupation in low occupied resources, but when a service is totally dominating the overall time, it lacks precision. The machine learning has a more stable error, but needs the training set. This study suggest that a black-box occupation approach with both techniques is possible and very useful.",IEEE conference,no,"['monitoring', 'technique', 'despite', 'advantage', 'increase', 'complexity', 'monitor', 'highly', 'dynamic', 'paper', 'analyze', 'two', 'distinct', 'method', 'tackle', 'monitoring', 'problem', 'reduced', 'goal', 'understand', 'feasibility', 'one', 'specific', 'driver', 'simplicity', 'aim', 'determine', 'extent', 'possible', 'characterize', 'state', 'two', 'generic', 'tandem', 'process', 'using', 'little', 'information', 'possible', 'answer', 'question', 'simulation', 'using', 'queue', 'simulated', 'two', 'could', 'distinct', 'operation', 'set', 'module', 'used', 'total', 'response', 'time', 'seen', 'upstream', 'setup', 'metric', 'applied', 'two', 'distinct', 'method', 'analyze', 'result', 'first', 'used', 'supervised', 'machine', 'learning', 'algorithm', 'identify', 'bottleneck', 'happening', 'secondly', 'used', 'decomposition', 'identify', 'occupation', 'two', 'fashion', 'result', 'show', 'methodology', 'advantage', 'limitation', 'separation', 'signal', 'accurately', 'identifies', 'occupation', 'low', 'resource', 'overall', 'time', 'lack', 'precision', 'machine', 'learning', 'stable', 'error', 'need', 'training', 'set', 'study', 'suggest', 'occupation', 'technique', 'possible', 'useful']"
"The Jaseci Programming Paradigm and Runtime Stack: Building Scale-Out Production Applications Easy and Fast Today's production scale-out applications include many sub-application components, such as storage backends, logging infrastructure and AI models. These components have drastically different characteristics, are required to work in collaboration, and interface with each other as microservices. This leads to increasingly high complexity in developing, optimizing, configuring, and deploying scale-out applications, raising the barrier to entry for most individuals and small teams. We developed a novel co-designed runtime system, Jaseci, and programming language, Jac, which aims to reduce this complexity. The key design principle throughout Jaseci's design is to raise the level of abstraction by moving as much of the scale-out data management, microservice componentization, and live update complexity into the runtime stack to be automated and optimized automatically. We use real-world AI applications to demonstrate Jaseci's benefit for application performance and developer productivity.",The Jaseci Programming Paradigm and Runtime Stack: Building Scale-Out Production Applications Easy and Fast,"Today's production scale-out applications include many sub-application components, such as storage backends, logging infrastructure and AI models. These components have drastically different characteristics, are required to work in collaboration, and interface with each other as microservices. This leads to increasingly high complexity in developing, optimizing, configuring, and deploying scale-out applications, raising the barrier to entry for most individuals and small teams. We developed a novel co-designed runtime system, Jaseci, and programming language, Jac, which aims to reduce this complexity. The key design principle throughout Jaseci's design is to raise the level of abstraction by moving as much of the scale-out data management, microservice componentization, and live update complexity into the runtime stack to be automated and optimized automatically. We use real-world AI applications to demonstrate Jaseci's benefit for application performance and developer productivity.",IEEE journal,no,"['jaseci', 'programming', 'paradigm', 'runtime', 'stack', 'building', 'production', 'easy', 'fast', 'today', 'production', 'include', 'many', 'storage', 'logging', 'infrastructure', 'ai', 'model', 'drastically', 'different', 'characteristic', 'required', 'work', 'collaboration', 'interface', 'lead', 'increasingly', 'high', 'complexity', 'developing', 'optimizing', 'configuring', 'deploying', 'barrier', 'entry', 'individual', 'small', 'team', 'developed', 'novel', 'runtime', 'jaseci', 'programming', 'language', 'aim', 'reduce', 'complexity', 'key', 'design', 'principle', 'throughout', 'jaseci', 'design', 'raise', 'level', 'abstraction', 'moving', 'much', 'management', 'componentization', 'live', 'update', 'complexity', 'runtime', 'stack', 'automated', 'optimized', 'automatically', 'use', 'ai', 'demonstrate', 'jaseci', 'benefit', 'performance', 'developer']"
"A Study on the Aging and Fault Tolerance of Microservices in Kubernetes Microservice-based applications are increasingly being adopted along with cloud service models, and nowadays serve millions of customers daily. They are supported by container-based architectures which are managed by orchestration platforms, such as Kubernetes, that monitor, manage, and automate most of the tasks. Although these tools provide failover capabilities, it is not yet studied how effective they are in dealing with diverse types of faults. Fault injection is an effective methodology for validating components that are supposed to detect the malfunctions and report/correct them. This paper studies the effectiveness of Kubernetes in dealing with faults and aging in microservices, and on the possibility of using faults to accelerate aging effects for testing purposes. For this, we conducted an analysis of the implementation and tuning of Kubernetes probes, followed by experiments with varying load and fault injection into two distinct and representative microservice testbeds to analyze the capacity of probes in detecting issues in applications. The goal is to improve the knowledge of researchers and developers on whether Kubernetes can detect different faults and aging issues. Also, even though some services tend to accumulate aging effects, with increasing resource consumption, Kubernetes does not detect them nor acts on them, indicating that probes may be insufficient for aging scenarios. Results also showed that fault injection is useful to accelerate aging effects for the testing and evaluation purposes.",A Study on the Aging and Fault Tolerance of Microservices in Kubernetes,"Microservice-based applications are increasingly being adopted along with cloud service models, and nowadays serve millions of customers daily. They are supported by container-based architectures which are managed by orchestration platforms, such as Kubernetes, that monitor, manage, and automate most of the tasks. Although these tools provide failover capabilities, it is not yet studied how effective they are in dealing with diverse types of faults. Fault injection is an effective methodology for validating components that are supposed to detect the malfunctions and report/correct them. This paper studies the effectiveness of Kubernetes in dealing with faults and aging in microservices, and on the possibility of using faults to accelerate aging effects for testing purposes. For this, we conducted an analysis of the implementation and tuning of Kubernetes probes, followed by experiments with varying load and fault injection into two distinct and representative microservice testbeds to analyze the capacity of probes in detecting issues in applications. The goal is to improve the knowledge of researchers and developers on whether Kubernetes can detect different faults and aging issues. Also, even though some services tend to accumulate aging effects, with increasing resource consumption, Kubernetes does not detect them nor acts on them, indicating that probes may be insufficient for aging scenarios. Results also showed that fault injection is useful to accelerate aging effects for the testing and evaluation purposes.",IEEE journal,no,"['study', 'aging', 'fault', 'tolerance', 'kubernetes', 'increasingly', 'adopted', 'along', 'model', 'nowadays', 'serve', 'million', 'customer', 'daily', 'supported', 'managed', 'orchestration', 'platform', 'kubernetes', 'monitor', 'manage', 'automate', 'task', 'although', 'tool', 'provide', 'capability', 'yet', 'studied', 'effective', 'dealing', 'diverse', 'type', 'fault', 'fault', 'injection', 'effective', 'methodology', 'detect', 'paper', 'study', 'effectiveness', 'kubernetes', 'dealing', 'fault', 'aging', 'possibility', 'using', 'fault', 'accelerate', 'aging', 'effect', 'testing', 'purpose', 'conducted', 'analysis', 'implementation', 'kubernetes', 'probe', 'followed', 'experiment', 'varying', 'load', 'fault', 'injection', 'two', 'distinct', 'representative', 'analyze', 'capacity', 'probe', 'detecting', 'issue', 'goal', 'improve', 'knowledge', 'researcher', 'developer', 'whether', 'kubernetes', 'detect', 'different', 'fault', 'aging', 'issue', 'also', 'even', 'though', 'tend', 'aging', 'effect', 'increasing', 'resource', 'consumption', 'kubernetes', 'detect', 'act', 'indicating', 'probe', 'may', 'aging', 'scenario', 'result', 'also', 'showed', 'fault', 'injection', 'useful', 'accelerate', 'aging', 'effect', 'testing', 'evaluation', 'purpose']"
"Building the Right Technology Landscape This chapter discusses the key aspects of the technology ecosystem and how to build the right technology foundation in a scalable and cost affordable manner. The topics covered are data platform, analytics engine, multi‐agent systems, adaptive user experiences, universal software gateways, and technology partner ecosystems. Database management architecture and systems is the most critical component of the technical infrastructure for AI projects. Analytics engines help reduce the time to develop and deploy the AI algorithms. These engines most often come with a domain‐specific common modeling language to uniformly represent analytical functions. Many industries and companies are adopting microservices architecture as a potential intermediate step before migration into a more mature multi‐agent system. Paying attention to user experience and making it adaptive is therefore critical to the success of any AI initiative. Technology partners become critical as they may bring speed and scale needed to win with AI.",Building the Right Technology Landscape,"This chapter discusses the key aspects of the technology ecosystem and how to build the right technology foundation in a scalable and cost affordable manner. The topics covered are data platform, analytics engine, multi‐agent systems, adaptive user experiences, universal software gateways, and technology partner ecosystems. Database management architecture and systems is the most critical component of the technical infrastructure for AI projects. Analytics engines help reduce the time to develop and deploy the AI algorithms. These engines most often come with a domain‐specific common modeling language to uniformly represent analytical functions. Many industries and companies are adopting microservices architecture as a potential intermediate step before migration into a more mature multi‐agent system. Paying attention to user experience and making it adaptive is therefore critical to the success of any AI initiative. Technology partners become critical as they may bring speed and scale needed to win with AI.",IEEE book,no,"['building', 'right', 'technology', 'landscape', 'chapter', 'discusses', 'key', 'aspect', 'technology', 'ecosystem', 'build', 'right', 'technology', 'foundation', 'scalable', 'cost', 'manner', 'topic', 'covered', 'platform', 'analytics', 'engine', 'adaptive', 'user', 'experience', 'universal', 'gateway', 'technology', 'partner', 'ecosystem', 'database', 'management', 'critical', 'technical', 'infrastructure', 'ai', 'project', 'analytics', 'engine', 'help', 'reduce', 'time', 'develop', 'deploy', 'ai', 'algorithm', 'engine', 'often', 'come', 'common', 'modeling', 'language', 'represent', 'analytical', 'function', 'many', 'industry', 'company', 'adopting', 'potential', 'intermediate', 'step', 'migration', 'attention', 'user', 'experience', 'making', 'adaptive', 'therefore', 'critical', 'success', 'ai', 'initiative', 'technology', 'partner', 'become', 'critical', 'may', 'bring', 'speed', 'scale', 'needed', 'ai']"
