text,Document Title,Abstract,source,bool,processed_text
"Autonomic Security Management for IoT Smart Spaces Embedded sensors and smart devices have turned the environments around us into smart spaces that could automatically evolve, depending on the needs of users, and adapt to the new conditions. While smart spaces are beneficial and desired in many aspects, they could be compromised and expose privacy, security, or render the whole environment a hostile space in which regular tasks cannot be accomplished anymore. In fact, ensuring the security of smart spaces is a very challenging task due to the heterogeneity of devices, vast attack surface, and device resource limitations. The key objective of this study is to minimize the manual work in enforcing the security of smart spaces by leveraging the autonomic computing paradigm in the management of IoT environments. More specifically, we strive to build an autonomic manager that can monitor the smart space continuously, analyze the context, plan and execute countermeasures to maintain the desired level of security, and reduce liability and risks of security breaches. We follow the microservice architecture pattern and propose a generic ontology named Secure Smart Space Ontology (SSSO) for describing dynamic contextual information in security-enhanced smart spaces. Based on SSSO, we build an autonomic security manager with four layers that continuously monitors the managed spaces, analyzes contextual information and events, and automatically plans and implements adaptive security policies.As the evaluation, focusing on a current BlackBerry customer problem, we deployed the proposed autonomic security manager to maintain the security of a smart conference room with 32 devices and 66 services. The high performance of the proposed solution was also evaluated on a large-scale deployment with over 1.8 million triples.",Autonomic Security Management for IoT Smart Spaces,"Embedded sensors and smart devices have turned the environments around us into smart spaces that could automatically evolve, depending on the needs of users, and adapt to the new conditions. While smart spaces are beneficial and desired in many aspects, they could be compromised and expose privacy, security, or render the whole environment a hostile space in which regular tasks cannot be accomplished anymore. In fact, ensuring the security of smart spaces is a very challenging task due to the heterogeneity of devices, vast attack surface, and device resource limitations. The key objective of this study is to minimize the manual work in enforcing the security of smart spaces by leveraging the autonomic computing paradigm in the management of IoT environments. More specifically, we strive to build an autonomic manager that can monitor the smart space continuously, analyze the context, plan and execute countermeasures to maintain the desired level of security, and reduce liability and risks of security breaches. We follow the microservice architecture pattern and propose a generic ontology named Secure Smart Space Ontology (SSSO) for describing dynamic contextual information in security-enhanced smart spaces. Based on SSSO, we build an autonomic security manager with four layers that continuously monitors the managed spaces, analyzes contextual information and events, and automatically plans and implements adaptive security policies.As the evaluation, focusing on a current BlackBerry customer problem, we deployed the proposed autonomic security manager to maintain the security of a smart conference room with 32 devices and 66 services. The high performance of the proposed solution was also evaluated on a large-scale deployment with over 1.8 million triples.",ACM,no,"['autonomic', 'security', 'management', 'iot', 'smart', 'space', 'embedded', 'sensor', 'smart', 'device', 'environment', 'around', 'u', 'smart', 'space', 'could', 'automatically', 'evolve', 'depending', 'need', 'user', 'adapt', 'new', 'condition', 'smart', 'space', 'beneficial', 'desired', 'many', 'aspect', 'could', 'expose', 'privacy', 'security', 'render', 'whole', 'environment', 'space', 'regular', 'task', 'fact', 'ensuring', 'security', 'smart', 'space', 'challenging', 'task', 'due', 'heterogeneity', 'device', 'vast', 'attack', 'surface', 'device', 'resource', 'limitation', 'key', 'objective', 'study', 'minimize', 'manual', 'work', 'enforcing', 'security', 'smart', 'space', 'leveraging', 'autonomic', 'computing', 'paradigm', 'management', 'iot', 'environment', 'specifically', 'build', 'autonomic', 'manager', 'monitor', 'smart', 'space', 'continuously', 'analyze', 'context', 'plan', 'execute', 'maintain', 'desired', 'level', 'security', 'reduce', 'risk', 'security', 'breach', 'follow', 'pattern', 'propose', 'generic', 'ontology', 'named', 'secure', 'smart', 'space', 'ontology', 'describing', 'dynamic', 'contextual', 'information', 'smart', 'space', 'based', 'build', 'autonomic', 'security', 'manager', 'four', 'layer', 'continuously', 'monitor', 'managed', 'space', 'analyzes', 'contextual', 'information', 'event', 'automatically', 'plan', 'implement', 'adaptive', 'security', 'evaluation', 'focusing', 'current', 'customer', 'problem', 'deployed', 'proposed', 'autonomic', 'security', 'manager', 'maintain', 'security', 'smart', 'room', 'device', 'high', 'performance', 'proposed', 'solution', 'also', 'evaluated', 'deployment', 'million']"
"Microservice Security Metrics for Secure Communication, Identity Management, and Observability Microservice architectures are increasingly being used to develop application systems. Despite many guidelines and best practices being published, architecting microservice systems for security is challenging. Reasons are the size and complexity of microservice systems, their polyglot nature, and the demand for the continuous evolution of these systems. In this context, to manually validate that security architecture tactics are employed as intended throughout the system is a time-consuming and error-prone task. In this article, we present an approach to avoid such manual validation before each continuous evolution step in a microservice system, which we demonstrate using three widely used categories of security tactics: secure communication, identity management, and observability. Our approach is based on a review of existing security guidelines, the gray literature, and the scientific literature, from which we derived Architectural Design Decisions (ADDs) with the found security tactics as decision options. In our approach, we propose novel detectors to detect these decision options automatically and formally defined metrics to measure the conformance of a system to the different options of the ADDs. We apply the approach to a case study data set of 10 open source microservice systems, plus another 20 variants of these systems, for which we manually inspected the source code for security tactics. We demonstrate and assess the validity and appropriateness of our metrics by performing an assessment of their conformance to the ADDs in our systems’ dataset through statistical methods.","Microservice Security Metrics for Secure Communication, Identity Management, and Observability","Microservice architectures are increasingly being used to develop application systems. Despite many guidelines and best practices being published, architecting microservice systems for security is challenging. Reasons are the size and complexity of microservice systems, their polyglot nature, and the demand for the continuous evolution of these systems. In this context, to manually validate that security architecture tactics are employed as intended throughout the system is a time-consuming and error-prone task. In this article, we present an approach to avoid such manual validation before each continuous evolution step in a microservice system, which we demonstrate using three widely used categories of security tactics: secure communication, identity management, and observability. Our approach is based on a review of existing security guidelines, the gray literature, and the scientific literature, from which we derived Architectural Design Decisions (ADDs) with the found security tactics as decision options. In our approach, we propose novel detectors to detect these decision options automatically and formally defined metrics to measure the conformance of a system to the different options of the ADDs. We apply the approach to a case study data set of 10 open source microservice systems, plus another 20 variants of these systems, for which we manually inspected the source code for security tactics. We demonstrate and assess the validity and appropriateness of our metrics by performing an assessment of their conformance to the ADDs in our systems’ dataset through statistical methods.",ACM,no,"['security', 'metric', 'secure', 'communication', 'identity', 'management', 'observability', 'increasingly', 'used', 'develop', 'despite', 'many', 'guideline', 'best', 'practice', 'published', 'architecting', 'security', 'challenging', 'reason', 'size', 'complexity', 'nature', 'demand', 'continuous', 'evolution', 'context', 'manually', 'validate', 'security', 'tactic', 'employed', 'intended', 'throughout', 'task', 'article', 'present', 'avoid', 'manual', 'validation', 'continuous', 'evolution', 'step', 'demonstrate', 'using', 'three', 'widely', 'used', 'category', 'security', 'tactic', 'secure', 'communication', 'identity', 'management', 'observability', 'based', 'review', 'existing', 'security', 'guideline', 'gray', 'literature', 'scientific', 'literature', 'derived', 'architectural', 'design', 'decision', 'add', 'found', 'security', 'tactic', 'decision', 'option', 'propose', 'novel', 'detect', 'decision', 'option', 'automatically', 'defined', 'metric', 'measure', 'conformance', 'different', 'option', 'add', 'apply', 'case', 'study', 'set', 'open', 'source', 'another', 'manually', 'source', 'code', 'security', 'tactic', 'demonstrate', 'assess', 'validity', 'metric', 'performing', 'assessment', 'conformance', 'add', 'dataset', 'statistical', 'method']"
"On the Understandability of Design-Level Security Practices in Infrastructure-as-Code Scripts and Deployment Architectures Infrastructure as Code (IaC) automates IT infrastructure deployment, which is particularly beneficial for continuous releases, for instance, in the context of microservices and cloud systems. Despite its flexibility in application architecture, neglecting security can lead to vulnerabilities. The lack of comprehensive architectural security guidelines for IaC poses challenges in adhering to best practices. We studied how developers interpret IaC scripts (source code) in two IaC technologies, Ansible and Terraform, compared to semi-formal IaC deployment architecture models and metrics regarding design-level security understanding. In a controlled experiment involving ninety-four participants, we assessed the understandability of IaC-based deployment architectures through source code inspection compared to semi-formal representations in models and metrics.We hypothesized that providing semi-formal IaC deployment architecture models and metrics as supplementary material would significantly improve the comprehension of IaC security-related practices, as measured by task correctness. Our findings suggest that semi-formal IaC deployment architecture models and metrics as supplementary material enhance the understandability of IaC security-related practices without significantly increasing duration. We also observed a significant correlation between task correctness and duration when models and metrics were provided.",On the Understandability of Design-Level Security Practices in Infrastructure-as-Code Scripts and Deployment Architectures,"Infrastructure as Code (IaC) automates IT infrastructure deployment, which is particularly beneficial for continuous releases, for instance, in the context of microservices and cloud systems. Despite its flexibility in application architecture, neglecting security can lead to vulnerabilities. The lack of comprehensive architectural security guidelines for IaC poses challenges in adhering to best practices. We studied how developers interpret IaC scripts (source code) in two IaC technologies, Ansible and Terraform, compared to semi-formal IaC deployment architecture models and metrics regarding design-level security understanding. In a controlled experiment involving ninety-four participants, we assessed the understandability of IaC-based deployment architectures through source code inspection compared to semi-formal representations in models and metrics.We hypothesized that providing semi-formal IaC deployment architecture models and metrics as supplementary material would significantly improve the comprehension of IaC security-related practices, as measured by task correctness. Our findings suggest that semi-formal IaC deployment architecture models and metrics as supplementary material enhance the understandability of IaC security-related practices without significantly increasing duration. We also observed a significant correlation between task correctness and duration when models and metrics were provided.",ACM,no,"['understandability', 'security', 'practice', 'script', 'deployment', 'infrastructure', 'code', 'iac', 'automates', 'infrastructure', 'deployment', 'particularly', 'beneficial', 'continuous', 'release', 'instance', 'context', 'despite', 'flexibility', 'neglecting', 'security', 'lead', 'vulnerability', 'lack', 'comprehensive', 'architectural', 'security', 'guideline', 'iac', 'pose', 'challenge', 'best', 'practice', 'studied', 'developer', 'iac', 'script', 'source', 'code', 'two', 'iac', 'technology', 'terraform', 'compared', 'iac', 'deployment', 'model', 'metric', 'regarding', 'security', 'understanding', 'controlled', 'experiment', 'involving', 'participant', 'assessed', 'understandability', 'deployment', 'source', 'code', 'inspection', 'compared', 'representation', 'model', 'providing', 'iac', 'deployment', 'model', 'metric', 'supplementary', 'material', 'would', 'significantly', 'improve', 'comprehension', 'iac', 'practice', 'measured', 'task', 'correctness', 'finding', 'suggest', 'iac', 'deployment', 'model', 'metric', 'supplementary', 'material', 'enhance', 'understandability', 'iac', 'practice', 'without', 'significantly', 'increasing', 'duration', 'also', 'observed', 'significant', 'correlation', 'task', 'correctness', 'duration', 'model', 'metric', 'provided']"
"Fortifying Information Security: Security Implications of Microservice and Monolithic Architectures Monolithic architecture is a traditional and primary method for creating software programs. On the other hand, monolithic architecture's shortcomings were addressed by developing the unique evolutionary technique known as microservice architecture, which led to businesses' widespread acceptance of this design. However, the microservice design raises several security concerns, particularly web application security, a significant business problem. The purpose of this study is to analyse and contrast the security and safety features of monolithic and microservice architectures, emphasizing the security issues that each presents and the solutions that have been proposed to address them. Examining both architectures security risks and investigating viable mitigation strategies are covered in the paper. Microservices improve security and flexibility but also need a more complex and dynamic security strategy.",Fortifying Information Security: Security Implications of Microservice and Monolithic Architectures,"Monolithic architecture is a traditional and primary method for creating software programs. On the other hand, monolithic architecture's shortcomings were addressed by developing the unique evolutionary technique known as microservice architecture, which led to businesses' widespread acceptance of this design. However, the microservice design raises several security concerns, particularly web application security, a significant business problem. The purpose of this study is to analyse and contrast the security and safety features of monolithic and microservice architectures, emphasizing the security issues that each presents and the solutions that have been proposed to address them. Examining both architectures security risks and investigating viable mitigation strategies are covered in the paper. Microservices improve security and flexibility but also need a more complex and dynamic security strategy.",IEEE conference,no,"['information', 'security', 'security', 'implication', 'monolithic', 'monolithic', 'traditional', 'primary', 'method', 'creating', 'program', 'hand', 'monolithic', 'shortcoming', 'addressed', 'developing', 'unique', 'evolutionary', 'technique', 'known', 'led', 'business', 'widespread', 'acceptance', 'design', 'however', 'design', 'raise', 'several', 'security', 'concern', 'particularly', 'web', 'security', 'significant', 'business', 'problem', 'purpose', 'study', 'analyse', 'contrast', 'security', 'safety', 'feature', 'monolithic', 'emphasizing', 'security', 'issue', 'present', 'solution', 'proposed', 'address', 'examining', 'security', 'risk', 'investigating', 'viable', 'mitigation', 'strategy', 'covered', 'paper', 'improve', 'security', 'flexibility', 'also', 'need', 'complex', 'dynamic', 'security', 'strategy']"
"Building Secure Environments for Microservices Microservice-based architectures are widely used in modern software and the number of cyber attacks on software is increasing. It is essential to make microservices more reliable and resilient against cyber attacks. In this paper, we propose a methodology to detect configurations of computing systems that host microservices and containers, evaluate cyber risks of their essential components in an automatic continuous mode, and reconfigure environments aiming to make them less vulnerable against cyber attacks. Our solution supports multiple operating systems and hardware configurations. For cyber risk evaluation, our approach relies on a public database of Common Vulnerabilities and Exposures for software and hardware, as well as penetration testing and static analysis. Furthermore, the cyber risk evaluation model considers the attributes of microservices, such as their privilege level. We will show least and most vulnerable configurations for computing systems that use popular operating systems and applications.",Building Secure Environments for Microservices,"Microservice-based architectures are widely used in modern software and the number of cyber attacks on software is increasing. It is essential to make microservices more reliable and resilient against cyber attacks. In this paper, we propose a methodology to detect configurations of computing systems that host microservices and containers, evaluate cyber risks of their essential components in an automatic continuous mode, and reconfigure environments aiming to make them less vulnerable against cyber attacks. Our solution supports multiple operating systems and hardware configurations. For cyber risk evaluation, our approach relies on a public database of Common Vulnerabilities and Exposures for software and hardware, as well as penetration testing and static analysis. Furthermore, the cyber risk evaluation model considers the attributes of microservices, such as their privilege level. We will show least and most vulnerable configurations for computing systems that use popular operating systems and applications.",IEEE conference,no,"['building', 'secure', 'environment', 'widely', 'used', 'modern', 'number', 'cyber', 'attack', 'increasing', 'essential', 'make', 'reliable', 'resilient', 'cyber', 'attack', 'paper', 'propose', 'methodology', 'detect', 'configuration', 'computing', 'host', 'container', 'evaluate', 'cyber', 'risk', 'essential', 'automatic', 'continuous', 'mode', 'environment', 'aiming', 'make', 'less', 'vulnerable', 'cyber', 'attack', 'solution', 'support', 'multiple', 'operating', 'hardware', 'configuration', 'cyber', 'risk', 'evaluation', 'relies', 'public', 'database', 'common', 'vulnerability', 'exposure', 'hardware', 'well', 'testing', 'static', 'analysis', 'furthermore', 'cyber', 'risk', 'evaluation', 'model', 'considers', 'attribute', 'level', 'show', 'least', 'vulnerable', 'configuration', 'computing', 'use', 'popular', 'operating']"
"Research on Unified Authentication and Authorization in Microservice Architecture Microservice architecture reduces the coupling between application modules, which is conducive to the development, deployment and operation and maintenance of complex application systems. However, compared with the monolithic architecture, the access control of its resources becomes more complex. Based on the application scenario of enterprise system micro service architecture, aiming at the high security requirements of business system, through the analysis and research of micro service architecture, this paper designs a set of access control solution, which can meet the requirements of unified authentication, improving the efficiency of authority verification and accelerating the system development speed under the microservice architecture, which has reference for enterprise application system design significance.",Research on Unified Authentication and Authorization in Microservice Architecture,"Microservice architecture reduces the coupling between application modules, which is conducive to the development, deployment and operation and maintenance of complex application systems. However, compared with the monolithic architecture, the access control of its resources becomes more complex. Based on the application scenario of enterprise system micro service architecture, aiming at the high security requirements of business system, through the analysis and research of micro service architecture, this paper designs a set of access control solution, which can meet the requirements of unified authentication, improving the efficiency of authority verification and accelerating the system development speed under the microservice architecture, which has reference for enterprise application system design significance.",IEEE conference,no,"['research', 'unified', 'authentication', 'authorization', 'reduces', 'coupling', 'module', 'development', 'deployment', 'operation', 'maintenance', 'complex', 'however', 'compared', 'monolithic', 'access', 'control', 'resource', 'becomes', 'complex', 'based', 'scenario', 'enterprise', 'micro', 'aiming', 'high', 'security', 'requirement', 'business', 'analysis', 'research', 'micro', 'paper', 'design', 'set', 'access', 'control', 'solution', 'meet', 'requirement', 'unified', 'authentication', 'improving', 'efficiency', 'verification', 'development', 'speed', 'reference', 'enterprise', 'design']"
"An Overview Analysis of Authentication Mechanism in Microservices-Based Software Architecture: A Discussion Paper Microservices-based software architecture promotes scalability and flexibility by breaking down a software application into smaller modules and making it more independent and loosely coupled services compared to monolith systems. However, securing microservices in a distributed nature has become one of the challenges. Authentication is one of the most critical components that should be focused in the microservices security measures. It helps to identify that only authenticated personnel and services can access sensitive information and secure the trust between microservices. This discussion paper aims to provide an overview analysis and extensive understanding on the authentication mechanism in microservices-based software architecture. In this study, we explore different authentication mechanisms including Mutual Transport Layer Security (mTLS), Token based authentication and API Gateway authentication. This study examines the strengths and limitations of different authentication mechanisms in microservices-based software architecture. It also emphasizes the importance of authentication and the need for having a well-designed authentication mechanism to ensure the integrity and security of microservices-based software architecture is crucial.",An Overview Analysis of Authentication Mechanism in Microservices-Based Software Architecture: A Discussion Paper,"Microservices-based software architecture promotes scalability and flexibility by breaking down a software application into smaller modules and making it more independent and loosely coupled services compared to monolith systems. However, securing microservices in a distributed nature has become one of the challenges. Authentication is one of the most critical components that should be focused in the microservices security measures. It helps to identify that only authenticated personnel and services can access sensitive information and secure the trust between microservices. This discussion paper aims to provide an overview analysis and extensive understanding on the authentication mechanism in microservices-based software architecture. In this study, we explore different authentication mechanisms including Mutual Transport Layer Security (mTLS), Token based authentication and API Gateway authentication. This study examines the strengths and limitations of different authentication mechanisms in microservices-based software architecture. It also emphasizes the importance of authentication and the need for having a well-designed authentication mechanism to ensure the integrity and security of microservices-based software architecture is crucial.",IEEE conference,no,"['overview', 'analysis', 'authentication', 'mechanism', 'discussion', 'paper', 'promotes', 'scalability', 'flexibility', 'breaking', 'smaller', 'module', 'making', 'independent', 'loosely', 'coupled', 'compared', 'monolith', 'however', 'securing', 'distributed', 'nature', 'become', 'one', 'challenge', 'authentication', 'one', 'critical', 'focused', 'security', 'measure', 'help', 'identify', 'authenticated', 'personnel', 'access', 'sensitive', 'information', 'secure', 'trust', 'discussion', 'paper', 'aim', 'provide', 'overview', 'analysis', 'extensive', 'understanding', 'authentication', 'mechanism', 'study', 'explore', 'different', 'authentication', 'mechanism', 'including', 'mutual', 'transport', 'layer', 'security', 'based', 'authentication', 'api', 'gateway', 'authentication', 'study', 'examines', 'strength', 'limitation', 'different', 'authentication', 'mechanism', 'also', 'emphasizes', 'importance', 'authentication', 'need', 'authentication', 'mechanism', 'ensure', 'integrity', 'security', 'crucial']"
"A New Framework for Microservices with Single Sign-On, Security Assertion Markup Language and OpenID Connect Integrated global Single Sign-On (SSO) module is a security module for microservices which can be used to perform the basic authentication and authorization process in terms of user level and resources level. In general, micro services are the individual components which are executed separately for different purposes. In general, each individual service can communicate with external authentication mechanism to get validated in terms of identity and access check. But it is a complicated process for the services which are deployed individually because each service has to communicate with the authentication mechanism to get verified. In existing security models, the microservices are controlled through Auth 2.0 entity, Client Application and Authorization server individually. Therefore, this research study proposing an integrated framework called “BridG” identifies and connect all type of microservices with local and global network systems. The BridG framework has SSO module, Security Assertion Markup Language (SAML) and OpenID Connect (OlD C) to get authenticated and authorized for the individual microservices.","A New Framework for Microservices with Single Sign-On, Security Assertion Markup Language and OpenID Connect","Integrated global Single Sign-On (SSO) module is a security module for microservices which can be used to perform the basic authentication and authorization process in terms of user level and resources level. In general, micro services are the individual components which are executed separately for different purposes. In general, each individual service can communicate with external authentication mechanism to get validated in terms of identity and access check. But it is a complicated process for the services which are deployed individually because each service has to communicate with the authentication mechanism to get verified. In existing security models, the microservices are controlled through Auth 2.0 entity, Client Application and Authorization server individually. Therefore, this research study proposing an integrated framework called “BridG” identifies and connect all type of microservices with local and global network systems. The BridG framework has SSO module, Security Assertion Markup Language (SAML) and OpenID Connect (OlD C) to get authenticated and authorized for the individual microservices.",IEEE conference,no,"['new', 'framework', 'single', 'security', 'assertion', 'language', 'connect', 'integrated', 'global', 'single', 'sso', 'module', 'security', 'module', 'used', 'perform', 'basic', 'authentication', 'authorization', 'process', 'term', 'user', 'level', 'resource', 'level', 'general', 'micro', 'individual', 'executed', 'separately', 'different', 'purpose', 'general', 'individual', 'communicate', 'external', 'authentication', 'mechanism', 'get', 'validated', 'term', 'identity', 'access', 'check', 'complicated', 'process', 'deployed', 'individually', 'communicate', 'authentication', 'mechanism', 'get', 'verified', 'existing', 'security', 'model', 'controlled', 'entity', 'client', 'authorization', 'server', 'individually', 'therefore', 'research', 'study', 'proposing', 'integrated', 'framework', 'called', 'identifies', 'connect', 'type', 'local', 'global', 'network', 'framework', 'sso', 'module', 'security', 'assertion', 'language', 'connect', 'c', 'get', 'authenticated', 'authorized', 'individual']"
"11 things about Securing Microservice Microservices are a modern-era software development approach to creating REST APIs as a small independent process that is loosely coupled, performs business specific operation or capabilities, and is owned by a small team. Microservices are light weight components that are easy to develop, deploy and scale based on business requirements. Some of our customers use microservice with container-based deployment, some implement regular legacy process build and deploy on the webserver and some serverless in private, public, or hybrid cloud. Microservices are evolving and distributing the business requirement logic to multiple services which increases application complexity, maintainability and security while interacting with other services. Each organization follows multiple ways to secure their Microservices. Here, we will go through some of the security implementations and finally will review securing Microservices in zero trust.",11 things about Securing Microservice,"Microservices are a modern-era software development approach to creating REST APIs as a small independent process that is loosely coupled, performs business specific operation or capabilities, and is owned by a small team. Microservices are light weight components that are easy to develop, deploy and scale based on business requirements. Some of our customers use microservice with container-based deployment, some implement regular legacy process build and deploy on the webserver and some serverless in private, public, or hybrid cloud. Microservices are evolving and distributing the business requirement logic to multiple services which increases application complexity, maintainability and security while interacting with other services. Each organization follows multiple ways to secure their Microservices. Here, we will go through some of the security implementations and finally will review securing Microservices in zero trust.",IEEE conference,no,"['thing', 'securing', 'development', 'creating', 'rest', 'apis', 'small', 'independent', 'process', 'loosely', 'coupled', 'performs', 'business', 'specific', 'operation', 'capability', 'small', 'team', 'light', 'weight', 'easy', 'develop', 'deploy', 'scale', 'based', 'business', 'requirement', 'customer', 'use', 'deployment', 'implement', 'regular', 'legacy', 'process', 'build', 'deploy', 'serverless', 'private', 'public', 'hybrid', 'evolving', 'distributing', 'business', 'requirement', 'logic', 'multiple', 'increase', 'complexity', 'maintainability', 'security', 'interacting', 'organization', 'follows', 'multiple', 'way', 'secure', 'go', 'security', 'implementation', 'finally', 'review', 'securing', 'zero', 'trust']"
"Toward Enabling Self-Protection in the Service Mesh of the Microservice Architecture The service mesh is a dedicated infrastructure layer in a microservice architecture. It manages service-to-service communication within an application between decoupled or loosely coupled microservices (called services) without modifying their implementations. The service mesh includes APIs for security, traffic and policy management, and observability features. These features are enabled using a pre-defined configuration, which can be changed at runtime with human intervention. However, it has no autonomy to self-manage changes to the microservice application’s operational environment. A better configuration is one that can be customized according to environmental conditions during execution to protect the application from potential threats. This customization requires enabling self-protection mechanisms within the service mesh that evaluate the risk of environmental condition changes and enable appropriate configurations to defend the application from impending threats. In this paper, we design an assessment component into a service mesh that includes a security assurance case to define the threat model and dynamically assess the application given environment changes. We experiment with a demo application, Bookinfo, using an open-source service mesh platform, Istio, to enable self-protection. We consider certain parameters extracted from the service request as environmental conditions. We evaluate those parameters against the threat model and determine the risk of violating a security requirement for controlled and authorized information flow.",Toward Enabling Self-Protection in the Service Mesh of the Microservice Architecture,"The service mesh is a dedicated infrastructure layer in a microservice architecture. It manages service-to-service communication within an application between decoupled or loosely coupled microservices (called services) without modifying their implementations. The service mesh includes APIs for security, traffic and policy management, and observability features. These features are enabled using a pre-defined configuration, which can be changed at runtime with human intervention. However, it has no autonomy to self-manage changes to the microservice application’s operational environment. A better configuration is one that can be customized according to environmental conditions during execution to protect the application from potential threats. This customization requires enabling self-protection mechanisms within the service mesh that evaluate the risk of environmental condition changes and enable appropriate configurations to defend the application from impending threats. In this paper, we design an assessment component into a service mesh that includes a security assurance case to define the threat model and dynamically assess the application given environment changes. We experiment with a demo application, Bookinfo, using an open-source service mesh platform, Istio, to enable self-protection. We consider certain parameters extracted from the service request as environmental conditions. We evaluate those parameters against the threat model and determine the risk of violating a security requirement for controlled and authorized information flow.",IEEE conference,no,"['toward', 'enabling', 'mesh', 'mesh', 'dedicated', 'infrastructure', 'layer', 'manages', 'communication', 'within', 'decoupled', 'loosely', 'coupled', 'called', 'without', 'modifying', 'implementation', 'mesh', 'includes', 'apis', 'security', 'traffic', 'policy', 'management', 'observability', 'feature', 'feature', 'enabled', 'using', 'configuration', 'changed', 'runtime', 'human', 'however', 'autonomy', 'change', 'operational', 'environment', 'better', 'configuration', 'one', 'customized', 'according', 'environmental', 'condition', 'execution', 'protect', 'potential', 'threat', 'customization', 'requires', 'enabling', 'mechanism', 'within', 'mesh', 'evaluate', 'risk', 'environmental', 'condition', 'change', 'enable', 'appropriate', 'configuration', 'threat', 'paper', 'design', 'assessment', 'mesh', 'includes', 'security', 'assurance', 'case', 'define', 'threat', 'model', 'dynamically', 'assess', 'given', 'environment', 'change', 'experiment', 'demo', 'using', 'mesh', 'platform', 'istio', 'enable', 'consider', 'certain', 'parameter', 'extracted', 'request', 'environmental', 'condition', 'evaluate', 'parameter', 'threat', 'model', 'determine', 'risk', 'security', 'requirement', 'controlled', 'authorized', 'information', 'flow']"
"Component-Based Refinement and Verification of Information-Flow Security Policies for Cyber-Physical Microservice Architectures Since cyber-physical systems are inherently vulnerable to information leaks, software architects need to reason about security policies to define desired and undesired information flow through a system. The microservice architectural style requires the architects to refine a macro-level security policy into micro-level policies for individual microservices. However, when policies are refined in an ill-formed way, information leaks can emerge on composition of microservices. Related approaches to prevent such leaks do not take into account characteristics of cyber-physical systems like real-time behavior or message passing communication. In this paper, we enable the refinement and verification of information-flow security policies for cyber-physical microservice architectures. We provide architects with a set of well-formedness rules for refining a macro-level policy in a way that enforces its security restrictions. Based on the resulting micro-level policies, we present a verification technique to check if the real-time message passing of microservices is secure. In combination, our contributions prevent information leaks from emerging on composition. We evaluate the accuracy of our approach using an extension of the CoCoME case study.",Component-Based Refinement and Verification of Information-Flow Security Policies for Cyber-Physical Microservice Architectures,"Since cyber-physical systems are inherently vulnerable to information leaks, software architects need to reason about security policies to define desired and undesired information flow through a system. The microservice architectural style requires the architects to refine a macro-level security policy into micro-level policies for individual microservices. However, when policies are refined in an ill-formed way, information leaks can emerge on composition of microservices. Related approaches to prevent such leaks do not take into account characteristics of cyber-physical systems like real-time behavior or message passing communication. In this paper, we enable the refinement and verification of information-flow security policies for cyber-physical microservice architectures. We provide architects with a set of well-formedness rules for refining a macro-level policy in a way that enforces its security restrictions. Based on the resulting micro-level policies, we present a verification technique to check if the real-time message passing of microservices is secure. In combination, our contributions prevent information leaks from emerging on composition. We evaluate the accuracy of our approach using an extension of the CoCoME case study.",IEEE conference,no,"['refinement', 'verification', 'security', 'policy', 'since', 'inherently', 'vulnerable', 'information', 'leak', 'architect', 'need', 'reason', 'security', 'policy', 'define', 'desired', 'information', 'flow', 'architectural', 'style', 'requires', 'architect', 'refine', 'security', 'policy', 'policy', 'individual', 'however', 'policy', 'way', 'information', 'leak', 'emerge', 'composition', 'related', 'prevent', 'leak', 'take', 'account', 'characteristic', 'like', 'behavior', 'message', 'passing', 'communication', 'paper', 'enable', 'refinement', 'verification', 'security', 'policy', 'provide', 'architect', 'set', 'rule', 'policy', 'way', 'security', 'restriction', 'based', 'resulting', 'policy', 'present', 'verification', 'technique', 'check', 'message', 'passing', 'secure', 'combination', 'contribution', 'prevent', 'information', 'leak', 'emerging', 'composition', 'evaluate', 'accuracy', 'using', 'extension', 'case', 'study']"
"A Runtime Trust Evaluation Mechanism in the Service Mesh Architecture With the advancement of cloud-native computing, enterprise software is shifting towards a microservice architecture (MSA). In a MSA, the application is built as a composite of microservices (also called services) where each service is dedicated to providing specific functionalities and communicating via APIs. The service mesh is a dedicated infrastructure layer serving as a service-to-service communication platform. It is introduced to alleviate the complexity, manageability, and interoperability challenges involved in a MSA. Even though the service mesh includes APIs to secure service-to-service communication, more functionality is needed to handle the perimeter-less and dynamic cloud environment. The existing APIs enable security measures based on a pre-defined configuration. However, there is no mechanism for dynamic trust evaluation of the participating services, which is necessary to protect the application from potential attacks. Attackers can exploit a vulnerability caused by a rouge service as a backdoor to compromise the application. Thus, there is a need for a trust evaluation mechanism in the service mesh to follow zero-trust architecture (ZTA) principles. This paper introduces a runtime trust evaluator (RTE) incorporated as a component within the service mesh control plane. A RTE can evaluate the trustworthiness of services at runtime before establishing service-to-service communications. The core functionality of a RTE is to assess the new service invocation requests initiated by a service to evaluate the trustworthiness of that service. The RTE collects the services’ invocation history and other telemetric data to determine the services’ criticality level for single-point failure. The RTE assesses service invocation request attributes to determine the existence of an unauthorized request and the impact on the requested service’s criticality level. The result is an evaluation of the initiator service’s trustworthiness. We demonstrate our approach on an open source microservice application from the Google Cloud team called Online Boutique. The environment setup uses Kubernetes as an orchestration solution and Istio as the service mesh platform.",A Runtime Trust Evaluation Mechanism in the Service Mesh Architecture,"With the advancement of cloud-native computing, enterprise software is shifting towards a microservice architecture (MSA). In a MSA, the application is built as a composite of microservices (also called services) where each service is dedicated to providing specific functionalities and communicating via APIs. The service mesh is a dedicated infrastructure layer serving as a service-to-service communication platform. It is introduced to alleviate the complexity, manageability, and interoperability challenges involved in a MSA. Even though the service mesh includes APIs to secure service-to-service communication, more functionality is needed to handle the perimeter-less and dynamic cloud environment. The existing APIs enable security measures based on a pre-defined configuration. However, there is no mechanism for dynamic trust evaluation of the participating services, which is necessary to protect the application from potential attacks. Attackers can exploit a vulnerability caused by a rouge service as a backdoor to compromise the application. Thus, there is a need for a trust evaluation mechanism in the service mesh to follow zero-trust architecture (ZTA) principles. This paper introduces a runtime trust evaluator (RTE) incorporated as a component within the service mesh control plane. A RTE can evaluate the trustworthiness of services at runtime before establishing service-to-service communications. The core functionality of a RTE is to assess the new service invocation requests initiated by a service to evaluate the trustworthiness of that service. The RTE collects the services’ invocation history and other telemetric data to determine the services’ criticality level for single-point failure. The RTE assesses service invocation request attributes to determine the existence of an unauthorized request and the impact on the requested service’s criticality level. The result is an evaluation of the initiator service’s trustworthiness. We demonstrate our approach on an open source microservice application from the Google Cloud team called Online Boutique. The environment setup uses Kubernetes as an orchestration solution and Istio as the service mesh platform.",IEEE conference,no,"['runtime', 'trust', 'evaluation', 'mechanism', 'mesh', 'advancement', 'computing', 'enterprise', 'shifting', 'towards', 'msa', 'msa', 'built', 'composite', 'also', 'called', 'dedicated', 'providing', 'specific', 'functionality', 'communicating', 'via', 'apis', 'mesh', 'dedicated', 'infrastructure', 'layer', 'serving', 'communication', 'platform', 'introduced', 'complexity', 'manageability', 'interoperability', 'challenge', 'involved', 'msa', 'even', 'though', 'mesh', 'includes', 'apis', 'secure', 'communication', 'functionality', 'needed', 'handle', 'dynamic', 'environment', 'existing', 'apis', 'enable', 'security', 'measure', 'based', 'configuration', 'however', 'mechanism', 'dynamic', 'trust', 'evaluation', 'participating', 'necessary', 'protect', 'potential', 'attack', 'attacker', 'exploit', 'vulnerability', 'caused', 'compromise', 'thus', 'need', 'trust', 'evaluation', 'mechanism', 'mesh', 'follow', 'principle', 'paper', 'introduces', 'runtime', 'trust', 'rte', 'within', 'mesh', 'control', 'plane', 'rte', 'evaluate', 'trustworthiness', 'runtime', 'establishing', 'communication', 'core', 'functionality', 'rte', 'assess', 'new', 'invocation', 'request', 'evaluate', 'trustworthiness', 'rte', 'collect', 'invocation', 'history', 'determine', 'criticality', 'level', 'failure', 'rte', 'invocation', 'request', 'attribute', 'determine', 'existence', 'request', 'impact', 'requested', 'criticality', 'level', 'result', 'evaluation', 'trustworthiness', 'demonstrate', 'open', 'source', 'google', 'team', 'called', 'online', 'environment', 'setup', 'us', 'kubernetes', 'orchestration', 'solution', 'istio', 'mesh', 'platform']"
"Back to the future: N-Versioning of Microservices Microservices are the dominant architecture used to build internet-scale applications today. Being internet-facing, their most critical attack surfaces are the OWASP top 10 Web Application Security Risks. Many of the top 10 OWASP attack types—injection, cross site scripting, broken access control and security misconfigurations—have persisted for many years despite major investments in code analysis and secure development patterns. Because microservices decompose monolithic applications into components using clean APIs, they lend themselves to practical application of a classic security/resilience principle, N-versioning. The paper introduces RDDR, a principled approach for applying N-versioning to microservices to improve resilience to data leaks. RDDR applies N-versioning to vulnerable microservices, requiring minimal code changes and with low performance impact beyond the cost of replicating microservices. Our evaluation demonstrates RDDR mitigating vulnerabilities of the top 5 of the top 10 OWASP types by applying diversity and redundancy to individual microservices.",Back to the future: N-Versioning of Microservices,"Microservices are the dominant architecture used to build internet-scale applications today. Being internet-facing, their most critical attack surfaces are the OWASP top 10 Web Application Security Risks. Many of the top 10 OWASP attack types—injection, cross site scripting, broken access control and security misconfigurations—have persisted for many years despite major investments in code analysis and secure development patterns. Because microservices decompose monolithic applications into components using clean APIs, they lend themselves to practical application of a classic security/resilience principle, N-versioning. The paper introduces RDDR, a principled approach for applying N-versioning to microservices to improve resilience to data leaks. RDDR applies N-versioning to vulnerable microservices, requiring minimal code changes and with low performance impact beyond the cost of replicating microservices. Our evaluation demonstrates RDDR mitigating vulnerabilities of the top 5 of the top 10 OWASP types by applying diversity and redundancy to individual microservices.",IEEE conference,no,"['back', 'future', 'dominant', 'used', 'build', 'today', 'critical', 'attack', 'surface', 'owasp', 'top', 'web', 'security', 'risk', 'many', 'top', 'owasp', 'attack', 'site', 'access', 'control', 'security', 'many', 'year', 'despite', 'major', 'investment', 'code', 'analysis', 'secure', 'development', 'pattern', 'decompose', 'monolithic', 'using', 'clean', 'apis', 'practical', 'classic', 'principle', 'paper', 'introduces', 'rddr', 'applying', 'improve', 'resilience', 'leak', 'rddr', 'applies', 'vulnerable', 'requiring', 'minimal', 'code', 'change', 'low', 'performance', 'impact', 'beyond', 'cost', 'replicating', 'evaluation', 'demonstrates', 'rddr', 'mitigating', 'vulnerability', 'top', 'top', 'owasp', 'type', 'applying', 'diversity', 'redundancy', 'individual']"
"Exploiting Miscoordination of Microservices in Tandem for Effective DDoS Attacks Today’s software development landscape has witnessed a shift towards microservices based architectures. Using this approach, large software systems are implemented by combining loosely-coupled services, each responsible for specific task and defined with separate scaling properties. Auto-scaling is a primary capability of cloud computing which allows systems to adapt to fluctuating traffic loads by dynamically increasing (scale-up) and decreasing (scale-down) the number of resources used.We observe that when microservices which utilize separate auto-scaling mechanisms operate in tandem to process traffic, they may perform ineffectively, especially under overload conditions, due to DDoS attacks. This can result in throttling (Denial of service - DoS) and over-provisioning of resources (Economic Denial of Sustainability - EDoS).This paper demonstrates how an attacker can exploit the tandem behavior of microservices with different auto-scaling mechanisms to create an attack we denote as the Tandem Attack. We demonstrate the attack on a typical Serverless architecture and analyze its economical and performance damages. One intriguing finding is that some attacks may make a cloud customer paying for service denied requests.We conclude that independent scaling of loosely coupled components might form an inherent difficulty and end-to-end controls might be needed.",Exploiting Miscoordination of Microservices in Tandem for Effective DDoS Attacks,"Today’s software development landscape has witnessed a shift towards microservices based architectures. Using this approach, large software systems are implemented by combining loosely-coupled services, each responsible for specific task and defined with separate scaling properties. Auto-scaling is a primary capability of cloud computing which allows systems to adapt to fluctuating traffic loads by dynamically increasing (scale-up) and decreasing (scale-down) the number of resources used.We observe that when microservices which utilize separate auto-scaling mechanisms operate in tandem to process traffic, they may perform ineffectively, especially under overload conditions, due to DDoS attacks. This can result in throttling (Denial of service - DoS) and over-provisioning of resources (Economic Denial of Sustainability - EDoS).This paper demonstrates how an attacker can exploit the tandem behavior of microservices with different auto-scaling mechanisms to create an attack we denote as the Tandem Attack. We demonstrate the attack on a typical Serverless architecture and analyze its economical and performance damages. One intriguing finding is that some attacks may make a cloud customer paying for service denied requests.We conclude that independent scaling of loosely coupled components might form an inherent difficulty and end-to-end controls might be needed.",IEEE conference,no,"['exploiting', 'tandem', 'effective', 'ddos', 'attack', 'today', 'development', 'landscape', 'shift', 'towards', 'based', 'using', 'large', 'implemented', 'combining', 'responsible', 'specific', 'task', 'defined', 'separate', 'scaling', 'property', 'primary', 'capability', 'computing', 'allows', 'adapt', 'fluctuating', 'traffic', 'load', 'dynamically', 'increasing', 'decreasing', 'number', 'resource', 'observe', 'utilize', 'separate', 'mechanism', 'operate', 'tandem', 'process', 'traffic', 'may', 'perform', 'especially', 'overload', 'condition', 'due', 'ddos', 'attack', 'result', 'denial', 'resource', 'economic', 'denial', 'sustainability', 'paper', 'demonstrates', 'attacker', 'exploit', 'tandem', 'behavior', 'different', 'mechanism', 'create', 'attack', 'tandem', 'attack', 'demonstrate', 'attack', 'typical', 'serverless', 'analyze', 'performance', 'damage', 'one', 'finding', 'attack', 'may', 'make', 'customer', 'conclude', 'independent', 'scaling', 'loosely', 'coupled', 'might', 'form', 'inherent', 'difficulty', 'control', 'might', 'needed']"
"Towards Novel Security Architectures for Network Functions Virtualization The definition of elastic network services that can be orchestrated at run-time brings unprecedented agility and dynamicity in network operation, but also complicates security management. As a matter of fact, cyber-security appliances are still largely stuck to traditional paradigms, based on relatively static topologies and the security perimeter model. The uptake of service-oriented architectures and microservices is now suggesting to compose security services by orchestrating monitoring, inspection, and enforcement capabilities, which are natively implemented in each elementary component (virtual functions, software-defined network equipment). In this paper, we describe and evaluate a novel framework for monitoring, inspection and enforcement that provides a broad and heterogeneous security context for centralized analytics, correlation and detection. Our work represents the preliminary step towards the creation of true Security-as-a-Service (SecaaS) paradigms in virtualized environments, through programmatic composition of common capabilities available in each virtual function.",Towards Novel Security Architectures for Network Functions Virtualization,"The definition of elastic network services that can be orchestrated at run-time brings unprecedented agility and dynamicity in network operation, but also complicates security management. As a matter of fact, cyber-security appliances are still largely stuck to traditional paradigms, based on relatively static topologies and the security perimeter model. The uptake of service-oriented architectures and microservices is now suggesting to compose security services by orchestrating monitoring, inspection, and enforcement capabilities, which are natively implemented in each elementary component (virtual functions, software-defined network equipment). In this paper, we describe and evaluate a novel framework for monitoring, inspection and enforcement that provides a broad and heterogeneous security context for centralized analytics, correlation and detection. Our work represents the preliminary step towards the creation of true Security-as-a-Service (SecaaS) paradigms in virtualized environments, through programmatic composition of common capabilities available in each virtual function.",IEEE conference,no,"['towards', 'novel', 'security', 'network', 'function', 'virtualization', 'definition', 'elastic', 'network', 'orchestrated', 'brings', 'unprecedented', 'agility', 'dynamicity', 'network', 'operation', 'also', 'security', 'management', 'fact', 'still', 'traditional', 'paradigm', 'based', 'relatively', 'static', 'topology', 'security', 'model', 'compose', 'security', 'orchestrating', 'monitoring', 'inspection', 'enforcement', 'capability', 'implemented', 'virtual', 'function', 'network', 'equipment', 'paper', 'describe', 'evaluate', 'novel', 'framework', 'monitoring', 'inspection', 'enforcement', 'provides', 'broad', 'heterogeneous', 'security', 'context', 'centralized', 'analytics', 'correlation', 'detection', 'work', 'represents', 'preliminary', 'step', 'towards', 'creation', 'true', 'paradigm', 'virtualized', 'environment', 'composition', 'common', 'capability', 'available', 'virtual', 'function']"
"Threat Intelligence Sharing Component in the Service Mesh Architecture The service mesh is a dedicated infrastructure layer in a microservice architecture (MSA) to handle service-to-service communication through application programming interface (API) calls. The service mesh employs features for continuous monitoring and ensuring delivery of service requests among services securely and reliably. The service mesh should enable threat intelligence sharing among the services at runtime as a part of continuous monitoring so that services are aware of potential threats and adapt to mitigate the threats. Threat intelligence contains detailed descriptions of attack tactics, techniques, and procedures (TTP) that are analyzed for countermeasure deployment. In this paper, we introduce threat intelligence sharing (TIS) into the control plane of the service mesh to enable the sharing of threat intelligence among services in an automated manner. It requires a structured format to specify threat intelligence and a well-defined protocol for sharing intelligence. We adopt a structured threat information expression (STIX) schema to specify threat intelligence and use the trusted automated exchange of intelligence information (TAXII) as a defined protocol to share threat intelligence as STIX documents. The advantage of including a TIS component in the service mesh is that it can generate threat intelligence using available telemetry data and enable sharing among the services without forcing services to modify their functionalities to support the process. We experiment with the TIS component’s effectiveness using an open-source MSA application called Online Boutique, which uses the service mesh platform, Istio, and Kubernetes as the orchestration solution.",Threat Intelligence Sharing Component in the Service Mesh Architecture,"The service mesh is a dedicated infrastructure layer in a microservice architecture (MSA) to handle service-to-service communication through application programming interface (API) calls. The service mesh employs features for continuous monitoring and ensuring delivery of service requests among services securely and reliably. The service mesh should enable threat intelligence sharing among the services at runtime as a part of continuous monitoring so that services are aware of potential threats and adapt to mitigate the threats. Threat intelligence contains detailed descriptions of attack tactics, techniques, and procedures (TTP) that are analyzed for countermeasure deployment. In this paper, we introduce threat intelligence sharing (TIS) into the control plane of the service mesh to enable the sharing of threat intelligence among services in an automated manner. It requires a structured format to specify threat intelligence and a well-defined protocol for sharing intelligence. We adopt a structured threat information expression (STIX) schema to specify threat intelligence and use the trusted automated exchange of intelligence information (TAXII) as a defined protocol to share threat intelligence as STIX documents. The advantage of including a TIS component in the service mesh is that it can generate threat intelligence using available telemetry data and enable sharing among the services without forcing services to modify their functionalities to support the process. We experiment with the TIS component’s effectiveness using an open-source MSA application called Online Boutique, which uses the service mesh platform, Istio, and Kubernetes as the orchestration solution.",IEEE conference,no,"['threat', 'intelligence', 'sharing', 'mesh', 'mesh', 'dedicated', 'infrastructure', 'layer', 'msa', 'handle', 'communication', 'programming', 'interface', 'api', 'call', 'mesh', 'employ', 'feature', 'continuous', 'monitoring', 'ensuring', 'delivery', 'request', 'among', 'mesh', 'enable', 'threat', 'intelligence', 'sharing', 'among', 'runtime', 'part', 'continuous', 'monitoring', 'aware', 'potential', 'threat', 'adapt', 'mitigate', 'threat', 'threat', 'intelligence', 'contains', 'detailed', 'description', 'attack', 'tactic', 'technique', 'procedure', 'analyzed', 'deployment', 'paper', 'introduce', 'threat', 'intelligence', 'sharing', 'ti', 'control', 'plane', 'mesh', 'enable', 'sharing', 'threat', 'intelligence', 'among', 'automated', 'manner', 'requires', 'structured', 'format', 'specify', 'threat', 'intelligence', 'protocol', 'sharing', 'intelligence', 'adopt', 'structured', 'threat', 'information', 'expression', 'schema', 'specify', 'threat', 'intelligence', 'use', 'automated', 'exchange', 'intelligence', 'information', 'defined', 'protocol', 'share', 'threat', 'intelligence', 'document', 'advantage', 'including', 'ti', 'mesh', 'generate', 'threat', 'intelligence', 'using', 'available', 'telemetry', 'enable', 'sharing', 'among', 'without', 'modify', 'functionality', 'support', 'process', 'experiment', 'ti', 'effectiveness', 'using', 'msa', 'called', 'online', 'us', 'mesh', 'platform', 'istio', 'kubernetes', 'orchestration', 'solution']"
"Grunt Attack: Exploiting Execution Dependencies in Microservices Loosely-coupled and lightweight microservices running in containers are likely to form complex execution dependencies inside the system. The execution dependency arises when two execution paths partially share component microservices, resulting in potential runtime blocking effects. In this paper, we present Grunt Attack - a novel low-volume DDoS attack that takes advantage of the execution dependencies of microservice applications. Grunt Attack utilizes legitimate HTTP requests to accurately profile the internal pairwise dependencies of all supported execution paths in the target system. By grouping and characterizing all the execution paths based on their pairwise dependencies, the Grunt attacker can target only a few execution paths to launch a low-volume DDoS attack that achieves large performance damage to the entire system. To increase the attack stealthiness, the Grunt attacker avoids creating a persistent bottleneck by alternating the target execution paths within their dependency group. We validate the effectiveness of Grunt attack through experiments of open-source microservices benchmark applications on real clouds (e.g., EC2, Azure) equipped with state-of-the-art IDS/IPS systems and live attack scenarios. Our results show that Grunt attack consumes less than 20% additional CPU resource of the target system while increasing its average response time by over 10x.",Grunt Attack: Exploiting Execution Dependencies in Microservices,"Loosely-coupled and lightweight microservices running in containers are likely to form complex execution dependencies inside the system. The execution dependency arises when two execution paths partially share component microservices, resulting in potential runtime blocking effects. In this paper, we present Grunt Attack - a novel low-volume DDoS attack that takes advantage of the execution dependencies of microservice applications. Grunt Attack utilizes legitimate HTTP requests to accurately profile the internal pairwise dependencies of all supported execution paths in the target system. By grouping and characterizing all the execution paths based on their pairwise dependencies, the Grunt attacker can target only a few execution paths to launch a low-volume DDoS attack that achieves large performance damage to the entire system. To increase the attack stealthiness, the Grunt attacker avoids creating a persistent bottleneck by alternating the target execution paths within their dependency group. We validate the effectiveness of Grunt attack through experiments of open-source microservices benchmark applications on real clouds (e.g., EC2, Azure) equipped with state-of-the-art IDS/IPS systems and live attack scenarios. Our results show that Grunt attack consumes less than 20% additional CPU resource of the target system while increasing its average response time by over 10x.",IEEE conference,no,"['grunt', 'attack', 'exploiting', 'execution', 'dependency', 'lightweight', 'running', 'container', 'likely', 'form', 'complex', 'execution', 'dependency', 'inside', 'execution', 'dependency', 'arises', 'two', 'execution', 'path', 'partially', 'share', 'resulting', 'potential', 'runtime', 'blocking', 'effect', 'paper', 'present', 'grunt', 'attack', 'novel', 'ddos', 'attack', 'take', 'advantage', 'execution', 'dependency', 'grunt', 'attack', 'utilizes', 'http', 'request', 'accurately', 'profile', 'internal', 'pairwise', 'dependency', 'supported', 'execution', 'path', 'target', 'grouping', 'characterizing', 'execution', 'path', 'based', 'pairwise', 'dependency', 'grunt', 'attacker', 'target', 'execution', 'path', 'ddos', 'attack', 'achieves', 'large', 'performance', 'damage', 'entire', 'increase', 'attack', 'grunt', 'attacker', 'creating', 'bottleneck', 'target', 'execution', 'path', 'within', 'dependency', 'group', 'validate', 'effectiveness', 'grunt', 'attack', 'experiment', 'benchmark', 'real', 'azure', 'equipped', 'live', 'attack', 'scenario', 'result', 'show', 'grunt', 'attack', 'consumes', 'less', 'additional', 'cpu', 'resource', 'target', 'increasing', 'average', 'response', 'time']"
"A Cyber Risk Based Moving Target Defense Mechanism for Microservice Architectures Microservice Architectures (MSA) structure applications as a collection of loosely coupled services that implement business capabilities. The key advantages of MSA include inherent support for continuous deployment of large complex applications, agility and enhanced productivity. However, studies indicate that most MSA are homogeneous, and introduce shared vulnerabilites, thus vulnerable to multi-step attacks, which are economics-of-scale incentives to attackers. In this paper, we address the issue of shared vulnerabilities in microservices with a novel solution based on the concept of Moving Target Defenses (MTD). Our mechanism works by performing risk analysis against microservices to detect and prioritize vulnerabilities. Thereafter, security risk-oriented software diversification is employed, guided by a defined diversification index. The diversification is performed at runtime, leveraging both model and template based automatic code generation techniques to automatically transform programming languages and container images of the microservices. Consequently, the microservices attack surfaces are altered thereby introducing uncertainty for attackers while reducing the attackability of the microservices. Our experiments demonstrate the efficiency of our solution, with an average success rate of over 70% attack surface randomization.",A Cyber Risk Based Moving Target Defense Mechanism for Microservice Architectures,"Microservice Architectures (MSA) structure applications as a collection of loosely coupled services that implement business capabilities. The key advantages of MSA include inherent support for continuous deployment of large complex applications, agility and enhanced productivity. However, studies indicate that most MSA are homogeneous, and introduce shared vulnerabilites, thus vulnerable to multi-step attacks, which are economics-of-scale incentives to attackers. In this paper, we address the issue of shared vulnerabilities in microservices with a novel solution based on the concept of Moving Target Defenses (MTD). Our mechanism works by performing risk analysis against microservices to detect and prioritize vulnerabilities. Thereafter, security risk-oriented software diversification is employed, guided by a defined diversification index. The diversification is performed at runtime, leveraging both model and template based automatic code generation techniques to automatically transform programming languages and container images of the microservices. Consequently, the microservices attack surfaces are altered thereby introducing uncertainty for attackers while reducing the attackability of the microservices. Our experiments demonstrate the efficiency of our solution, with an average success rate of over 70% attack surface randomization.",IEEE conference,no,"['cyber', 'risk', 'based', 'moving', 'target', 'defense', 'mechanism', 'msa', 'structure', 'collection', 'loosely', 'coupled', 'implement', 'business', 'capability', 'key', 'advantage', 'msa', 'include', 'inherent', 'support', 'continuous', 'deployment', 'large', 'complex', 'agility', 'enhanced', 'however', 'study', 'indicate', 'msa', 'homogeneous', 'introduce', 'shared', 'thus', 'vulnerable', 'attack', 'attacker', 'paper', 'address', 'issue', 'shared', 'vulnerability', 'novel', 'solution', 'based', 'concept', 'moving', 'target', 'defense', 'mtd', 'mechanism', 'work', 'performing', 'risk', 'analysis', 'detect', 'vulnerability', 'security', 'diversification', 'employed', 'guided', 'defined', 'diversification', 'diversification', 'performed', 'runtime', 'leveraging', 'model', 'template', 'based', 'automatic', 'code', 'generation', 'technique', 'automatically', 'transform', 'programming', 'language', 'container', 'image', 'consequently', 'attack', 'surface', 'thereby', 'introducing', 'uncertainty', 'attacker', 'reducing', 'experiment', 'demonstrate', 'efficiency', 'solution', 'average', 'success', 'rate', 'attack', 'surface']"
"Embedding security and privacy into the development and operation of cloud applications and services This paper introduces an approach allowing cloud application developers, service providers to consider security and privacy requirements across the application lifecycle. Specifically, a DevOps framework has been described that took into account several emerging technologies such as Network Functions Virtualization (NFV) and Microservice Pattern Design. As an illustration, a proof-of-concept application in the healthcare domain is presented to support such direction.",Embedding security and privacy into the development and operation of cloud applications and services,"This paper introduces an approach allowing cloud application developers, service providers to consider security and privacy requirements across the application lifecycle. Specifically, a DevOps framework has been described that took into account several emerging technologies such as Network Functions Virtualization (NFV) and Microservice Pattern Design. As an illustration, a proof-of-concept application in the healthcare domain is presented to support such direction.",IEEE conference,no,"['security', 'privacy', 'development', 'operation', 'paper', 'introduces', 'allowing', 'developer', 'provider', 'consider', 'security', 'privacy', 'requirement', 'across', 'lifecycle', 'specifically', 'devops', 'framework', 'described', 'account', 'several', 'emerging', 'technology', 'network', 'function', 'virtualization', 'nfv', 'pattern', 'design', 'healthcare', 'domain', 'presented', 'support', 'direction']"
"Network Security Mechanism Optimization Strategy in Cloud Native Scenario Risk assessors and managers face many difficult challenges related to the new network system. These challenges include the continuous changes in the nature of network systems caused by technological progress, their distribution in the fields of physics, information and social cognition, and the complex network structure that usually includes thousands of nodes. Here, we review the probability and risk-based decision technology applied to network systems, and conclude that the existing methods can not solve all the components of the risk assessment triad (threat, vulnerability, consequence), and lack the ability to integrate across multiple areas of network systems, thus providing guidance for enhancing network security. We propose a cloud native security chain architecture and network topology reconstruction technology link based on the full link of microservices. The network security performance is quantified by multi-layer filtering mechanism and setting different fitness index functions. The method proposed in this paper solves the problems of packet loss, load balancing and distributed delay of network security mechanism in the global network to a certain extent.",Network Security Mechanism Optimization Strategy in Cloud Native Scenario,"Risk assessors and managers face many difficult challenges related to the new network system. These challenges include the continuous changes in the nature of network systems caused by technological progress, their distribution in the fields of physics, information and social cognition, and the complex network structure that usually includes thousands of nodes. Here, we review the probability and risk-based decision technology applied to network systems, and conclude that the existing methods can not solve all the components of the risk assessment triad (threat, vulnerability, consequence), and lack the ability to integrate across multiple areas of network systems, thus providing guidance for enhancing network security. We propose a cloud native security chain architecture and network topology reconstruction technology link based on the full link of microservices. The network security performance is quantified by multi-layer filtering mechanism and setting different fitness index functions. The method proposed in this paper solves the problems of packet loss, load balancing and distributed delay of network security mechanism in the global network to a certain extent.",IEEE conference,no,"['network', 'security', 'mechanism', 'optimization', 'strategy', 'native', 'scenario', 'risk', 'manager', 'face', 'many', 'difficult', 'challenge', 'related', 'new', 'network', 'challenge', 'include', 'continuous', 'change', 'nature', 'network', 'caused', 'technological', 'progress', 'distribution', 'field', 'information', 'social', 'cognition', 'complex', 'network', 'structure', 'usually', 'includes', 'thousand', 'node', 'review', 'probability', 'decision', 'technology', 'applied', 'network', 'conclude', 'existing', 'method', 'solve', 'risk', 'assessment', 'threat', 'vulnerability', 'lack', 'ability', 'integrate', 'across', 'multiple', 'area', 'network', 'thus', 'providing', 'guidance', 'enhancing', 'network', 'security', 'propose', 'native', 'security', 'chain', 'network', 'topology', 'technology', 'link', 'based', 'full', 'link', 'network', 'security', 'performance', 'mechanism', 'setting', 'different', 'function', 'method', 'proposed', 'paper', 'solves', 'problem', 'packet', 'loss', 'load', 'balancing', 'distributed', 'delay', 'network', 'security', 'mechanism', 'global', 'network', 'certain', 'extent']"
"Deployment and Automatic Registration of REST APIs using Jenkins, Spring Boot and WSO2 API Manager The API Gateway is a fundamental component within a large-scale microservices architecture, as it centralizes all the applications consumed by the different clients in a single access point. This is responsible for managing and administering security as a policy enforcement point, as well as the API lifecycle. The basic function of the API Gateway is to intercept all incoming requests that are sent through the API management system. Managing APIs in large systems requires a lot of effort to maintain the API lifecycle. To address this issue, we created a project that automatically manages the registration and deployment of APIs, using the starter provided by the Spring Boot framework, which is normally used to solve dependency management, WSO2 API Gateway and Jenkins as a tool for automating deployment tasks. The testing and validation process of the API lifecycle management solution scheme was performed in a controlled environment with virtual machines and docker container for the API Gateway.","Deployment and Automatic Registration of REST APIs using Jenkins, Spring Boot and WSO2 API Manager","The API Gateway is a fundamental component within a large-scale microservices architecture, as it centralizes all the applications consumed by the different clients in a single access point. This is responsible for managing and administering security as a policy enforcement point, as well as the API lifecycle. The basic function of the API Gateway is to intercept all incoming requests that are sent through the API management system. Managing APIs in large systems requires a lot of effort to maintain the API lifecycle. To address this issue, we created a project that automatically manages the registration and deployment of APIs, using the starter provided by the Spring Boot framework, which is normally used to solve dependency management, WSO2 API Gateway and Jenkins as a tool for automating deployment tasks. The testing and validation process of the API lifecycle management solution scheme was performed in a controlled environment with virtual machines and docker container for the API Gateway.",IEEE conference,no,"['deployment', 'automatic', 'registration', 'rest', 'apis', 'using', 'jenkins', 'spring', 'boot', 'api', 'manager', 'api', 'gateway', 'fundamental', 'within', 'consumed', 'different', 'client', 'single', 'access', 'point', 'responsible', 'managing', 'security', 'policy', 'enforcement', 'point', 'well', 'api', 'lifecycle', 'basic', 'function', 'api', 'gateway', 'incoming', 'request', 'api', 'management', 'managing', 'apis', 'large', 'requires', 'lot', 'effort', 'maintain', 'api', 'lifecycle', 'address', 'issue', 'created', 'project', 'automatically', 'manages', 'registration', 'deployment', 'apis', 'using', 'provided', 'spring', 'boot', 'framework', 'used', 'solve', 'dependency', 'management', 'api', 'gateway', 'jenkins', 'tool', 'automating', 'deployment', 'task', 'testing', 'validation', 'process', 'api', 'lifecycle', 'management', 'solution', 'scheme', 'performed', 'controlled', 'environment', 'virtual', 'machine', 'docker', 'container', 'api', 'gateway']"
"Web Application Security on Top of Public Cloud The prevalence of Microservices has made it quintessential to build web applications in a Cloud-Native fashion. While building applications in a cloud-native way, almost the entire infrastructure of an organization relies on an arbitrary Cloud Service Provider’s data center as the individual components of the organization’s on-premise infrastructure are morphed into the modern Infrastructure as a Service(IaaS) model in pay-as-you-go strategy. In this scenario, every Cloud Service Provider(CSP) ensures that they are responsible for securing the data at rest. But the data in transit is left to the user’s responsibility. Some prominent Cloud Service Providers offer services to encrypt the data in-transit as well. But under such circumstances, a copy of our enciphering keys are in any way kept under their premises which in turn is undesirable for many individual users and organizations. So, the solution is to do Client Side Encryption(CSE) to ensure the security ourselves. We are proposing a cryptosystem such that it solidifies the integrity of in-transit data by implementing the Homomorphic encryption technique using a modified form of RSA algorithm. (A study on in-flight data security using cloud services is also done.)",Web Application Security on Top of Public Cloud,"The prevalence of Microservices has made it quintessential to build web applications in a Cloud-Native fashion. While building applications in a cloud-native way, almost the entire infrastructure of an organization relies on an arbitrary Cloud Service Provider’s data center as the individual components of the organization’s on-premise infrastructure are morphed into the modern Infrastructure as a Service(IaaS) model in pay-as-you-go strategy. In this scenario, every Cloud Service Provider(CSP) ensures that they are responsible for securing the data at rest. But the data in transit is left to the user’s responsibility. Some prominent Cloud Service Providers offer services to encrypt the data in-transit as well. But under such circumstances, a copy of our enciphering keys are in any way kept under their premises which in turn is undesirable for many individual users and organizations. So, the solution is to do Client Side Encryption(CSE) to ensure the security ourselves. We are proposing a cryptosystem such that it solidifies the integrity of in-transit data by implementing the Homomorphic encryption technique using a modified form of RSA algorithm. (A study on in-flight data security using cloud services is also done.)",IEEE conference,no,"['web', 'security', 'top', 'public', 'made', 'build', 'web', 'fashion', 'building', 'way', 'almost', 'entire', 'infrastructure', 'organization', 'relies', 'provider', 'center', 'individual', 'organization', 'infrastructure', 'modern', 'infrastructure', 'iaa', 'model', 'strategy', 'scenario', 'every', 'provider', 'csp', 'ensures', 'responsible', 'securing', 'rest', 'user', 'responsibility', 'prominent', 'provider', 'offer', 'well', 'circumstance', 'key', 'way', 'kept', 'premise', 'turn', 'many', 'individual', 'user', 'organization', 'solution', 'client', 'side', 'encryption', 'ensure', 'security', 'proposing', 'integrity', 'implementing', 'encryption', 'technique', 'using', 'modified', 'form', 'algorithm', 'study', 'security', 'using', 'also', 'done']"
"The Design Method of Micro-Unit Cryptographic Service Framework In order to adapt to the rapid development of information technology in the digital age, it is necessary to build a general cryptographic service delivery capability to provide security protection for data exchange in various scenarios.Cryptographic services need to be combined with a variety of complex cryptographic technologies to establish a secure foundation. At the same time, the efficiency of implementation must be guaranteed. In order to meet this demand, a micro-unit cryptographic service framework is proposed. Based on microservices, plug-in, service engine and other technologies, a micro-unit crypto service platform supporting functional reconfiguration is designed. The programmable micro-unit crypto component can generate service links according to the quality of service, and provide flexible access methods for crypto service. The crypto function of the client and the server can be divided into fine-granularity units, which can be combined into a more flexible crypto system which can adapt to the rapid change of security requirements and deal with new security threats. Based on this framework, crypto service providers can quickly establish a scalable crypto service system that can adapt to various scenarios, meet different security levels and be easily expanded.",The Design Method of Micro-Unit Cryptographic Service Framework,"In order to adapt to the rapid development of information technology in the digital age, it is necessary to build a general cryptographic service delivery capability to provide security protection for data exchange in various scenarios.Cryptographic services need to be combined with a variety of complex cryptographic technologies to establish a secure foundation. At the same time, the efficiency of implementation must be guaranteed. In order to meet this demand, a micro-unit cryptographic service framework is proposed. Based on microservices, plug-in, service engine and other technologies, a micro-unit crypto service platform supporting functional reconfiguration is designed. The programmable micro-unit crypto component can generate service links according to the quality of service, and provide flexible access methods for crypto service. The crypto function of the client and the server can be divided into fine-granularity units, which can be combined into a more flexible crypto system which can adapt to the rapid change of security requirements and deal with new security threats. Based on this framework, crypto service providers can quickly establish a scalable crypto service system that can adapt to various scenarios, meet different security levels and be easily expanded.",IEEE conference,no,"['design', 'method', 'cryptographic', 'framework', 'order', 'adapt', 'rapid', 'development', 'information', 'technology', 'digital', 'age', 'necessary', 'build', 'general', 'cryptographic', 'delivery', 'capability', 'provide', 'security', 'protection', 'exchange', 'various', 'need', 'combined', 'variety', 'complex', 'cryptographic', 'technology', 'establish', 'secure', 'foundation', 'time', 'efficiency', 'implementation', 'must', 'guaranteed', 'order', 'meet', 'demand', 'cryptographic', 'framework', 'proposed', 'based', 'engine', 'technology', 'crypto', 'platform', 'supporting', 'functional', 'reconfiguration', 'designed', 'programmable', 'crypto', 'generate', 'link', 'according', 'quality', 'provide', 'flexible', 'access', 'method', 'crypto', 'crypto', 'function', 'client', 'server', 'divided', 'unit', 'combined', 'flexible', 'crypto', 'adapt', 'rapid', 'change', 'security', 'requirement', 'deal', 'new', 'security', 'threat', 'based', 'framework', 'crypto', 'provider', 'quickly', 'establish', 'scalable', 'crypto', 'adapt', 'various', 'scenario', 'meet', 'different', 'security', 'level', 'easily']"
"Development of a new server-to-server communication security approach A crucial part of more prominent software architecture is communication among server hosts. Whether communicating with a database, a microservice, or an external service provider, integrity and confidentiality are essential guarantees that such a connection must provide. This paper aims to propose a new approach to secure the transport layer of such communications by creating a crafted protocol for this particular use case and by nullifying the need for extra measures and responsibilities that are now added at the application layer, as the analyzed state-of-the-art solutions disclose. As shown by the positive results of the already developed prototype, the authors believe this new approach can become a crucial and essential component in future server-to-server secure communications, considering how crucial secure data transmission is and will be.",Development of a new server-to-server communication security approach,"A crucial part of more prominent software architecture is communication among server hosts. Whether communicating with a database, a microservice, or an external service provider, integrity and confidentiality are essential guarantees that such a connection must provide. This paper aims to propose a new approach to secure the transport layer of such communications by creating a crafted protocol for this particular use case and by nullifying the need for extra measures and responsibilities that are now added at the application layer, as the analyzed state-of-the-art solutions disclose. As shown by the positive results of the already developed prototype, the authors believe this new approach can become a crucial and essential component in future server-to-server secure communications, considering how crucial secure data transmission is and will be.",IEEE conference,no,"['development', 'new', 'communication', 'security', 'crucial', 'part', 'prominent', 'communication', 'among', 'server', 'host', 'whether', 'communicating', 'database', 'external', 'provider', 'integrity', 'essential', 'guarantee', 'connection', 'must', 'provide', 'paper', 'aim', 'propose', 'new', 'secure', 'transport', 'layer', 'communication', 'creating', 'protocol', 'particular', 'use', 'case', 'need', 'extra', 'measure', 'responsibility', 'added', 'layer', 'analyzed', 'solution', 'shown', 'positive', 'result', 'already', 'developed', 'prototype', 'author', 'believe', 'new', 'become', 'crucial', 'essential', 'future', 'secure', 'communication', 'considering', 'crucial', 'secure', 'transmission']"
"Assessing Security Risks of Software Supply Chains Using Software Bill of Materials The software supply chain is composed of a growing number of components including binaries, libraries, tools, and microservices necessary to meet the requirements of modern software. Products assembled by software vendors are usually comprised of open-source and commercial components. Software supply chain attacks are one of the largest growing categories of cybersecurity threats and the large number of dependencies of a vendor's product makes it possible for a single vulnerability to propagate to many vendor products. Additionally, the software supply chain offers a large attack surface that allows vulnerabilities in upstream transitive dependencies to affect the core software. Software Bill Of Materials (SBOM) is an emerging technology that can be used in tandem with analysis tools to detect and mitigate security vulnerabilities in software supply chains. In this research, we use open-source tools Trivy and Grype to assess the security of 1,151 SBOMs mined from third-party software repositories of various domains and sizes. We explore the distribution of software vulnerabilities across SBOMs and look for the most vulnerable software components. We conclude that this research demonstrates the threat of security via software supply chain vulnerabilities as well as the viability of using SBOMs to help assess security in the software supply chain.",Assessing Security Risks of Software Supply Chains Using Software Bill of Materials,"The software supply chain is composed of a growing number of components including binaries, libraries, tools, and microservices necessary to meet the requirements of modern software. Products assembled by software vendors are usually comprised of open-source and commercial components. Software supply chain attacks are one of the largest growing categories of cybersecurity threats and the large number of dependencies of a vendor's product makes it possible for a single vulnerability to propagate to many vendor products. Additionally, the software supply chain offers a large attack surface that allows vulnerabilities in upstream transitive dependencies to affect the core software. Software Bill Of Materials (SBOM) is an emerging technology that can be used in tandem with analysis tools to detect and mitigate security vulnerabilities in software supply chains. In this research, we use open-source tools Trivy and Grype to assess the security of 1,151 SBOMs mined from third-party software repositories of various domains and sizes. We explore the distribution of software vulnerabilities across SBOMs and look for the most vulnerable software components. We conclude that this research demonstrates the threat of security via software supply chain vulnerabilities as well as the viability of using SBOMs to help assess security in the software supply chain.",IEEE conference,no,"['assessing', 'security', 'risk', 'supply', 'chain', 'using', 'material', 'supply', 'chain', 'composed', 'growing', 'number', 'including', 'binary', 'library', 'tool', 'necessary', 'meet', 'requirement', 'modern', 'product', 'vendor', 'usually', 'comprised', 'commercial', 'supply', 'chain', 'attack', 'one', 'largest', 'growing', 'category', 'threat', 'large', 'number', 'dependency', 'vendor', 'product', 'make', 'possible', 'single', 'vulnerability', 'propagate', 'many', 'vendor', 'product', 'additionally', 'supply', 'chain', 'offer', 'large', 'attack', 'surface', 'allows', 'vulnerability', 'upstream', 'dependency', 'affect', 'core', 'material', 'emerging', 'technology', 'used', 'tandem', 'analysis', 'tool', 'detect', 'mitigate', 'security', 'vulnerability', 'supply', 'chain', 'research', 'use', 'tool', 'assess', 'security', 'sboms', 'repository', 'various', 'domain', 'size', 'explore', 'distribution', 'vulnerability', 'across', 'sboms', 'look', 'vulnerable', 'conclude', 'research', 'demonstrates', 'threat', 'security', 'via', 'supply', 'chain', 'vulnerability', 'well', 'using', 'sboms', 'help', 'assess', 'security', 'supply', 'chain']"
"Data security issues in MaaS-enabling platforms Mobility as a Service takes the concept of XaaS to transportation: a MaaS provider shall merge transport options from different mobility providers, seamlessly handling the whole experience of traveling, from providing information, to travel planning, and payments handling. To effectively support the creation of a market of MaaS providers, we envision the creation of ICT infrastructures based on microservices, a modern and renowned development model that fosters the creation of an ecosystem of reusable components. The flexibility of such platforms is their key advantage, yet it poses many security issues. In this paper, we look at these problems through the lens of our experience on one of such platforms, called SMAll. We classify the most relevant vulnerabilities related to data reliability, integrity, and authenticity, and we investigate directions for their mitigation.",Data security issues in MaaS-enabling platforms,"Mobility as a Service takes the concept of XaaS to transportation: a MaaS provider shall merge transport options from different mobility providers, seamlessly handling the whole experience of traveling, from providing information, to travel planning, and payments handling. To effectively support the creation of a market of MaaS providers, we envision the creation of ICT infrastructures based on microservices, a modern and renowned development model that fosters the creation of an ecosystem of reusable components. The flexibility of such platforms is their key advantage, yet it poses many security issues. In this paper, we look at these problems through the lens of our experience on one of such platforms, called SMAll. We classify the most relevant vulnerabilities related to data reliability, integrity, and authenticity, and we investigate directions for their mitigation.",IEEE conference,no,"['security', 'issue', 'platform', 'mobility', 'take', 'concept', 'xaas', 'transportation', 'provider', 'shall', 'transport', 'option', 'different', 'mobility', 'provider', 'seamlessly', 'handling', 'whole', 'experience', 'providing', 'information', 'planning', 'payment', 'handling', 'effectively', 'support', 'creation', 'market', 'provider', 'creation', 'ict', 'infrastructure', 'based', 'modern', 'development', 'model', 'foster', 'creation', 'ecosystem', 'reusable', 'flexibility', 'platform', 'key', 'advantage', 'yet', 'pose', 'many', 'security', 'issue', 'paper', 'look', 'problem', 'experience', 'one', 'platform', 'called', 'small', 'classify', 'relevant', 'vulnerability', 'related', 'reliability', 'integrity', 'investigate', 'direction', 'mitigation']"
"Moving Target Defense for Cloud-Native Applications The proliferation of cloud-native applications has sparked significant interest across various sectors. As these methodologies gain traction, they introduce a transformative shift within the cloud computing landscape. At the forefront of this shift is the synergy between container technology and microservice architecture, promising to significantly enhance both efficiency and agility across industries. Nonetheless, this transfor-mation also adds complexity and enlarges the system attack surface, introducing additional vulnerabilities susceptible to being exploited by well-informed and resourceful attackers, especially in case of static defense techniques. To address these challenges, we propose a Moving Target Defense (MTD) approach, which proactively intervenes on the lifecycle of cloud-native application components. Such dynamicity serves as deterrent to potential adversaries, making persistence harder, lowering the effectiveness of automated attack tools, and increasing overall complexity and cost. We detail a step-by-step path, ranging from simple to advanced MTD techniques, targeting both stateless and stateful applications within a cloud-native environment. We evaluate these strategies and demonstrate that they effectively mitigate different types of attacks (e.g., Denial of service (DoS), lateral movement, reconnaissance, etc.) with minimal resource overhead and without causing service interruptions during normal system operation.",Moving Target Defense for Cloud-Native Applications,"The proliferation of cloud-native applications has sparked significant interest across various sectors. As these methodologies gain traction, they introduce a transformative shift within the cloud computing landscape. At the forefront of this shift is the synergy between container technology and microservice architecture, promising to significantly enhance both efficiency and agility across industries. Nonetheless, this transfor-mation also adds complexity and enlarges the system attack surface, introducing additional vulnerabilities susceptible to being exploited by well-informed and resourceful attackers, especially in case of static defense techniques. To address these challenges, we propose a Moving Target Defense (MTD) approach, which proactively intervenes on the lifecycle of cloud-native application components. Such dynamicity serves as deterrent to potential adversaries, making persistence harder, lowering the effectiveness of automated attack tools, and increasing overall complexity and cost. We detail a step-by-step path, ranging from simple to advanced MTD techniques, targeting both stateless and stateful applications within a cloud-native environment. We evaluate these strategies and demonstrate that they effectively mitigate different types of attacks (e.g., Denial of service (DoS), lateral movement, reconnaissance, etc.) with minimal resource overhead and without causing service interruptions during normal system operation.",IEEE conference,no,"['moving', 'target', 'defense', 'significant', 'interest', 'across', 'various', 'sector', 'methodology', 'gain', 'introduce', 'shift', 'within', 'computing', 'landscape', 'shift', 'container', 'technology', 'promising', 'significantly', 'enhance', 'efficiency', 'agility', 'across', 'industry', 'nonetheless', 'also', 'add', 'complexity', 'attack', 'surface', 'introducing', 'additional', 'vulnerability', 'attacker', 'especially', 'case', 'static', 'defense', 'technique', 'address', 'challenge', 'propose', 'moving', 'target', 'defense', 'mtd', 'lifecycle', 'dynamicity', 'serf', 'potential', 'making', 'persistence', 'lowering', 'effectiveness', 'automated', 'attack', 'tool', 'increasing', 'overall', 'complexity', 'cost', 'detail', 'path', 'simple', 'advanced', 'mtd', 'technique', 'stateless', 'stateful', 'within', 'environment', 'evaluate', 'strategy', 'demonstrate', 'effectively', 'mitigate', 'different', 'type', 'attack', 'denial', 'movement', 'etc', 'minimal', 'resource', 'overhead', 'without', 'causing', 'normal', 'operation']"
"Docker container security via heuristics-based multilateral security-conceptual and pragmatic study In this paper we attempt to provide unified security and privacy multilateral security architecture for cloud services stack, using key latest technology via LxC in general and Docker containers in specific. Docker is one of the first to use LxC at such a large scale, but LxC is not a very new concept, it is around for quite some time. Docker container service is a key Platform as a Service (PaaS) based engine. Unified layered cloud computing multilateral security implementation addresses the potential risks associated with cloud computing environment. It also specifies when, at what time, where, and how to apply security controls. Unified Design includes the structured connection between the components of cloud ecosystem for basket and bucket of unified cloud-based hybrid services using micro service oriented venture architectural services realized in terms of PAAS using Docker container as a service. We surveyed various industry/academic professionals and based on our experience we tried to understand the challenges they faced while using the cloud system. We tried to understand the security challenges, incidents, story pieces, accidents, experience they faced while designing, implementing and using the cloud services/resources virtually via online. This work helps to assess the security design and architecture quality using multilateral security framework for Docker container. We try to present the architecture using OSI/TCP/IP stack model with reference to Cloud service stack model and deployment stack model and try to propose the balanced multilateral security prototype with reference to Docker Container security architecture.",Docker container security via heuristics-based multilateral security-conceptual and pragmatic study,"In this paper we attempt to provide unified security and privacy multilateral security architecture for cloud services stack, using key latest technology via LxC in general and Docker containers in specific. Docker is one of the first to use LxC at such a large scale, but LxC is not a very new concept, it is around for quite some time. Docker container service is a key Platform as a Service (PaaS) based engine. Unified layered cloud computing multilateral security implementation addresses the potential risks associated with cloud computing environment. It also specifies when, at what time, where, and how to apply security controls. Unified Design includes the structured connection between the components of cloud ecosystem for basket and bucket of unified cloud-based hybrid services using micro service oriented venture architectural services realized in terms of PAAS using Docker container as a service. We surveyed various industry/academic professionals and based on our experience we tried to understand the challenges they faced while using the cloud system. We tried to understand the security challenges, incidents, story pieces, accidents, experience they faced while designing, implementing and using the cloud services/resources virtually via online. This work helps to assess the security design and architecture quality using multilateral security framework for Docker container. We try to present the architecture using OSI/TCP/IP stack model with reference to Cloud service stack model and deployment stack model and try to propose the balanced multilateral security prototype with reference to Docker Container security architecture.",IEEE conference,no,"['docker', 'container', 'security', 'via', 'multilateral', 'pragmatic', 'study', 'paper', 'attempt', 'provide', 'unified', 'security', 'privacy', 'multilateral', 'security', 'stack', 'using', 'key', 'latest', 'technology', 'via', 'lxc', 'general', 'docker', 'container', 'specific', 'docker', 'one', 'first', 'use', 'lxc', 'large', 'scale', 'lxc', 'new', 'concept', 'around', 'quite', 'time', 'docker', 'container', 'key', 'platform', 'paas', 'based', 'engine', 'unified', 'layered', 'computing', 'multilateral', 'security', 'implementation', 'address', 'potential', 'risk', 'associated', 'computing', 'environment', 'also', 'time', 'apply', 'security', 'control', 'unified', 'design', 'includes', 'structured', 'connection', 'ecosystem', 'unified', 'hybrid', 'using', 'micro', 'oriented', 'architectural', 'realized', 'term', 'paas', 'using', 'docker', 'container', 'various', 'professional', 'based', 'experience', 'tried', 'understand', 'challenge', 'faced', 'using', 'tried', 'understand', 'security', 'challenge', 'incident', 'piece', 'experience', 'faced', 'designing', 'implementing', 'using', 'via', 'online', 'work', 'help', 'assess', 'security', 'design', 'quality', 'using', 'multilateral', 'security', 'framework', 'docker', 'container', 'present', 'using', 'stack', 'model', 'reference', 'stack', 'model', 'deployment', 'stack', 'model', 'propose', 'balanced', 'multilateral', 'security', 'prototype', 'reference', 'docker', 'container', 'security']"
"Easily Designing and Deploying AI enabled Network and Telecom services Currently, there do not exist any open-source systems that offer streamlined and easy development and productionalization of AI/ML enabled Intelligent Network and Telecom services. This is a big problem the Network operators/Service providers face today even though Network Function Virtualization (NFV) and Software Defined Networking (SDN) have become ubiquitous and the Next Generation networks aim to be more softwarized and AI-driven. This paper aims to show how to quickly and easily design Network, Telecom and Network Security services and deploy them into a containerized cloud environment. This paper also shows how to make the Network/Telecom services AI/ML enabled and deploy them in the same way into the containerized cloud environment. We will show using ONAP (an open-source whitebox Network Operating System and management platform) and Acumos (open-source AI platform for creation, sharing and management of AI models and solutions), and specifically using their DCAEMOD and Acumos Adapter components, that this is very easy to do. To serve as an example, we will create a Network service to analyze and classify malicious network traffic. Using the same framework and tools, we will deploy the created service as a set of communicating, containerized microservices into a Network Operating system and Management platform like ONAP which is cloud-agnostic and can be run on any cloud. The same created service can also be deployed directly into any other OSS or on any other cloud platform.",Easily Designing and Deploying AI enabled Network and Telecom services,"Currently, there do not exist any open-source systems that offer streamlined and easy development and productionalization of AI/ML enabled Intelligent Network and Telecom services. This is a big problem the Network operators/Service providers face today even though Network Function Virtualization (NFV) and Software Defined Networking (SDN) have become ubiquitous and the Next Generation networks aim to be more softwarized and AI-driven. This paper aims to show how to quickly and easily design Network, Telecom and Network Security services and deploy them into a containerized cloud environment. This paper also shows how to make the Network/Telecom services AI/ML enabled and deploy them in the same way into the containerized cloud environment. We will show using ONAP (an open-source whitebox Network Operating System and management platform) and Acumos (open-source AI platform for creation, sharing and management of AI models and solutions), and specifically using their DCAEMOD and Acumos Adapter components, that this is very easy to do. To serve as an example, we will create a Network service to analyze and classify malicious network traffic. Using the same framework and tools, we will deploy the created service as a set of communicating, containerized microservices into a Network Operating system and Management platform like ONAP which is cloud-agnostic and can be run on any cloud. The same created service can also be deployed directly into any other OSS or on any other cloud platform.",IEEE conference,no,"['easily', 'designing', 'deploying', 'ai', 'enabled', 'network', 'telecom', 'currently', 'exist', 'offer', 'streamlined', 'easy', 'development', 'enabled', 'intelligent', 'network', 'telecom', 'big', 'problem', 'network', 'provider', 'face', 'today', 'even', 'though', 'network', 'function', 'virtualization', 'nfv', 'defined', 'networking', 'sdn', 'become', 'ubiquitous', 'next', 'generation', 'network', 'aim', 'paper', 'aim', 'show', 'quickly', 'easily', 'design', 'network', 'telecom', 'network', 'security', 'deploy', 'containerized', 'environment', 'paper', 'also', 'show', 'make', 'enabled', 'deploy', 'way', 'containerized', 'environment', 'show', 'using', 'network', 'operating', 'management', 'platform', 'acumos', 'ai', 'platform', 'creation', 'sharing', 'management', 'ai', 'model', 'solution', 'specifically', 'using', 'acumos', 'adapter', 'easy', 'serve', 'example', 'create', 'network', 'analyze', 'classify', 'network', 'traffic', 'using', 'framework', 'tool', 'deploy', 'created', 'set', 'communicating', 'containerized', 'network', 'operating', 'management', 'platform', 'like', 'run', 'created', 'also', 'deployed', 'directly', 'os', 'platform']"
"Supporting Confidential Workloads in SPIRE The migration of traditional deployment to clouds has driven the need for a more robust security model, the Zero-Trust model. The application of zero-trust principles addresses known security issues such as lateral movement attacks but adds extra identity management complexity. In addition, to cover a broader range of attacks, one must think of strategies to protect data, code, and credentials in such applications. Confidential computing aims to fulfill this goal. Nevertheless, confidential computing is even more complex to implement than Zero-Trust. In this work, we combine the Zero-Trust model with confidential computing by leveraging the SPIFFE standard through its reference implementation (SPIRE), and Intel SGX through the SCONE framework, to seamlessly supply software identities to confidential microservices. Furthermore, we also protected the whole identity-provisioning stack with Intel SGX and assessed the performance overhead. We believe this combination not only improves the security of SPIFFE deployments but also leverages SPIFFE to facilitate the integration between confidential computing components and native applications.",Supporting Confidential Workloads in SPIRE,"The migration of traditional deployment to clouds has driven the need for a more robust security model, the Zero-Trust model. The application of zero-trust principles addresses known security issues such as lateral movement attacks but adds extra identity management complexity. In addition, to cover a broader range of attacks, one must think of strategies to protect data, code, and credentials in such applications. Confidential computing aims to fulfill this goal. Nevertheless, confidential computing is even more complex to implement than Zero-Trust. In this work, we combine the Zero-Trust model with confidential computing by leveraging the SPIFFE standard through its reference implementation (SPIRE), and Intel SGX through the SCONE framework, to seamlessly supply software identities to confidential microservices. Furthermore, we also protected the whole identity-provisioning stack with Intel SGX and assessed the performance overhead. We believe this combination not only improves the security of SPIFFE deployments but also leverages SPIFFE to facilitate the integration between confidential computing components and native applications.",IEEE conference,no,"['supporting', 'confidential', 'workload', 'migration', 'traditional', 'deployment', 'driven', 'need', 'robust', 'security', 'model', 'model', 'principle', 'address', 'known', 'security', 'issue', 'movement', 'attack', 'add', 'extra', 'identity', 'management', 'complexity', 'addition', 'cover', 'broader', 'range', 'attack', 'one', 'must', 'strategy', 'protect', 'code', 'confidential', 'computing', 'aim', 'fulfill', 'goal', 'nevertheless', 'confidential', 'computing', 'even', 'complex', 'implement', 'work', 'combine', 'model', 'confidential', 'computing', 'leveraging', 'spiffe', 'standard', 'reference', 'implementation', 'intel', 'framework', 'seamlessly', 'supply', 'identity', 'confidential', 'furthermore', 'also', 'whole', 'stack', 'intel', 'assessed', 'performance', 'overhead', 'believe', 'combination', 'improves', 'security', 'spiffe', 'deployment', 'also', 'leverage', 'spiffe', 'facilitate', 'integration', 'confidential', 'computing', 'native']"
"SOA Approach - Identity and Access Management for the Risk Management Platform The Risk Management system should help customs to more easily and effectively detect irregularities in import, export or transit of goods. Customs administrations today are required to provide extensive facilitation while maintaining control over the international movement of goods, means of transport and persons. The level of risk is determined in the context of the priorities of the Customs administrations e.g. whether the priority is collection of duties and taxes or checking prohibitions and restrictions or any other specific area that has been identified. The aim of the proposed platform in this paper is to achieve a high-quality, multi-layered approach to risk management that is effective and efficient, i.e. the platform is built on decoupled microservices, the different components are working together and an interruption in one segment does not have major effect on the overall system. The main motivation behind this case study is the hands-on experience we have and the close proximity to the project, i.e. information exchange and team discussions as the main available resources.",SOA Approach - Identity and Access Management for the Risk Management Platform,"The Risk Management system should help customs to more easily and effectively detect irregularities in import, export or transit of goods. Customs administrations today are required to provide extensive facilitation while maintaining control over the international movement of goods, means of transport and persons. The level of risk is determined in the context of the priorities of the Customs administrations e.g. whether the priority is collection of duties and taxes or checking prohibitions and restrictions or any other specific area that has been identified. The aim of the proposed platform in this paper is to achieve a high-quality, multi-layered approach to risk management that is effective and efficient, i.e. the platform is built on decoupled microservices, the different components are working together and an interruption in one segment does not have major effect on the overall system. The main motivation behind this case study is the hands-on experience we have and the close proximity to the project, i.e. information exchange and team discussions as the main available resources.",IEEE conference,no,"['soa', 'identity', 'access', 'management', 'risk', 'management', 'platform', 'risk', 'management', 'help', 'custom', 'easily', 'effectively', 'detect', 'good', 'custom', 'administration', 'today', 'required', 'provide', 'extensive', 'maintaining', 'control', 'international', 'movement', 'good', 'mean', 'transport', 'person', 'level', 'risk', 'context', 'priority', 'custom', 'administration', 'whether', 'priority', 'collection', 'checking', 'restriction', 'specific', 'area', 'identified', 'aim', 'proposed', 'platform', 'paper', 'achieve', 'risk', 'management', 'effective', 'efficient', 'platform', 'built', 'decoupled', 'different', 'working', 'together', 'one', 'segment', 'major', 'effect', 'overall', 'main', 'motivation', 'behind', 'case', 'study', 'experience', 'close', 'proximity', 'project', 'information', 'exchange', 'team', 'discussion', 'main', 'available', 'resource']"
"Security Audit of Docker Container Images in Cloud Architecture Containers technology radically changed the ways for packaging applications and deploying them as services in cloud environments. According to the recent report on security predictions of 2020 by Trend Micro, the vulnerabilities in container components deployed with cloud architecture have been one of the top security concerns for development and operations teams in enterprises. Docker is one of the leading container technologies that automate the deployment of applications into containers. Docker Hub is a public repository by Docker for storing and sharing the Docker images. These Docker images are pulled from the Docker Hub repository and the security of images being used from the repositories in any cloud environment could be at risk. Vulnerabilities in Docker images could have a detrimental effect on enterprise applications. In this paper, the focus is on securing the Docker images using vulnerability centric approach (VCA) to detect the vulnerabilities. A set of use cases compliant with the NIST SP 800-190 Application Container Security Guide is developed for audit compliance of Docker container images with the OWASP Container Security Verification Standards (CSVS). In this paper, firs vulnerabilities of Docker container images are identified and assessed using the VCA. Then, a set of use cases to identify presence of the vulnerabilities is developed to facilitate the security audit of the container images. Finally, it is illustrated how the proposed use cases can be mapped with the requirements of the OWASP Container Security Verification Standards. The use cases can serve as a security auditing tool during the development, deployment, and maintenance of cloud microservices applications.",Security Audit of Docker Container Images in Cloud Architecture,"Containers technology radically changed the ways for packaging applications and deploying them as services in cloud environments. According to the recent report on security predictions of 2020 by Trend Micro, the vulnerabilities in container components deployed with cloud architecture have been one of the top security concerns for development and operations teams in enterprises. Docker is one of the leading container technologies that automate the deployment of applications into containers. Docker Hub is a public repository by Docker for storing and sharing the Docker images. These Docker images are pulled from the Docker Hub repository and the security of images being used from the repositories in any cloud environment could be at risk. Vulnerabilities in Docker images could have a detrimental effect on enterprise applications. In this paper, the focus is on securing the Docker images using vulnerability centric approach (VCA) to detect the vulnerabilities. A set of use cases compliant with the NIST SP 800-190 Application Container Security Guide is developed for audit compliance of Docker container images with the OWASP Container Security Verification Standards (CSVS). In this paper, firs vulnerabilities of Docker container images are identified and assessed using the VCA. Then, a set of use cases to identify presence of the vulnerabilities is developed to facilitate the security audit of the container images. Finally, it is illustrated how the proposed use cases can be mapped with the requirements of the OWASP Container Security Verification Standards. The use cases can serve as a security auditing tool during the development, deployment, and maintenance of cloud microservices applications.",IEEE conference,no,"['security', 'audit', 'docker', 'container', 'image', 'container', 'technology', 'changed', 'way', 'packaging', 'deploying', 'environment', 'according', 'recent', 'report', 'security', 'prediction', 'trend', 'micro', 'vulnerability', 'container', 'deployed', 'one', 'top', 'security', 'concern', 'development', 'operation', 'team', 'enterprise', 'docker', 'one', 'leading', 'container', 'technology', 'automate', 'deployment', 'container', 'docker', 'hub', 'public', 'repository', 'docker', 'storing', 'sharing', 'docker', 'image', 'docker', 'image', 'docker', 'hub', 'repository', 'security', 'image', 'used', 'repository', 'environment', 'could', 'risk', 'vulnerability', 'docker', 'image', 'could', 'effect', 'enterprise', 'paper', 'focus', 'securing', 'docker', 'image', 'using', 'vulnerability', 'centric', 'detect', 'vulnerability', 'set', 'use', 'case', 'compliant', 'sp', 'container', 'security', 'guide', 'developed', 'audit', 'docker', 'container', 'image', 'owasp', 'container', 'security', 'verification', 'standard', 'paper', 'vulnerability', 'docker', 'container', 'image', 'identified', 'assessed', 'using', 'set', 'use', 'case', 'identify', 'presence', 'vulnerability', 'developed', 'facilitate', 'security', 'audit', 'container', 'image', 'finally', 'illustrated', 'proposed', 'use', 'case', 'mapped', 'requirement', 'owasp', 'container', 'security', 'verification', 'standard', 'use', 'case', 'serve', 'security', 'tool', 'development', 'deployment', 'maintenance']"
"A Survey on Microservices Trust Models for Open Systems The microservices architecture (MSA) is a form of distributed systems architecture that has been widely adopted in large-scale software systems in recent years. As with other distributed system architectures, one of the challenges that MSA faces is establishing trust between the microservices, particularly in the context of open systems. The boundaries of open systems are unlimited and unknown, which means that they can be applied to any use case. Microservices can leave or join an open system arbitrarily, without restriction as to ownership or origin, and MSA systems can scale extensively. The organisation of microservices (in terms of the roles they play and the communication links they utilise) can also change in response to changes in the environment in which the system is situated. The management of trust within MSAs is of great importance as the concept of trust is critical to microservices communication, and the operation of an open MSA system is highly reliant on communication between these fine-grained microservices. Thus, a trust model should also be able to manage trust in an open environment. Current trust management solutions, however, are often domain-specific and many are not specifically tailored towards the open system model. This motivates research on trust management in the context of open MSA systems. In this paper, we examine existing microservices trust models, identify the limitations of these models in the context of the principles of open microservices systems, propose a set of qualities for open microservices trust models that emerge from these limitations, and assess selected microservices trust models using the proposed qualities.",A Survey on Microservices Trust Models for Open Systems,"The microservices architecture (MSA) is a form of distributed systems architecture that has been widely adopted in large-scale software systems in recent years. As with other distributed system architectures, one of the challenges that MSA faces is establishing trust between the microservices, particularly in the context of open systems. The boundaries of open systems are unlimited and unknown, which means that they can be applied to any use case. Microservices can leave or join an open system arbitrarily, without restriction as to ownership or origin, and MSA systems can scale extensively. The organisation of microservices (in terms of the roles they play and the communication links they utilise) can also change in response to changes in the environment in which the system is situated. The management of trust within MSAs is of great importance as the concept of trust is critical to microservices communication, and the operation of an open MSA system is highly reliant on communication between these fine-grained microservices. Thus, a trust model should also be able to manage trust in an open environment. Current trust management solutions, however, are often domain-specific and many are not specifically tailored towards the open system model. This motivates research on trust management in the context of open MSA systems. In this paper, we examine existing microservices trust models, identify the limitations of these models in the context of the principles of open microservices systems, propose a set of qualities for open microservices trust models that emerge from these limitations, and assess selected microservices trust models using the proposed qualities.",IEEE journal,no,"['survey', 'trust', 'model', 'open', 'msa', 'form', 'distributed', 'widely', 'adopted', 'recent', 'year', 'distributed', 'one', 'challenge', 'msa', 'face', 'establishing', 'trust', 'particularly', 'context', 'open', 'boundary', 'open', 'mean', 'applied', 'use', 'case', 'open', 'without', 'restriction', 'ownership', 'msa', 'scale', 'extensively', 'term', 'role', 'play', 'communication', 'link', 'utilise', 'also', 'change', 'response', 'change', 'environment', 'management', 'trust', 'within', 'msas', 'great', 'importance', 'concept', 'trust', 'critical', 'communication', 'operation', 'open', 'msa', 'highly', 'communication', 'thus', 'trust', 'model', 'also', 'able', 'manage', 'trust', 'open', 'environment', 'current', 'trust', 'management', 'solution', 'however', 'often', 'many', 'specifically', 'tailored', 'towards', 'open', 'model', 'research', 'trust', 'management', 'context', 'open', 'msa', 'paper', 'examine', 'existing', 'trust', 'model', 'identify', 'limitation', 'model', 'context', 'principle', 'open', 'propose', 'set', 'quality', 'open', 'trust', 'model', 'emerge', 'limitation', 'assess', 'selected', 'trust', 'model', 'using', 'proposed', 'quality']"
